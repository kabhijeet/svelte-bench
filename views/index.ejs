<!DOCTYPE html>
<html>
<head>
  <title>SvelteBench Visualization</title>
  <style>
    :root {
      --background: #fafafa;
      --surface: #ffffff;
      --surface-secondary: #f5f5f7;
      --surface-tertiary: #f2f2f7;
      --border-light: rgba(0, 0, 0, 0.08);
      --border-medium: rgba(0, 0, 0, 0.12);
      --text-primary: #1d1d1f;
      --text-secondary: #86868b;
      --text-tertiary: #6e6e73;
      --accent-blue: #007aff;
      --accent-blue-hover: #0056cc;
      --success: #28cd41;
      --success-bg: #f0fdf4;
      --warning: #ff9500;
      --warning-bg: #fffbf0;
      --error: #ff3b30;
      --error-bg: #fef2f2;
      --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.12);
      --radius-sm: 8px;
      --radius-md: 12px;
      --radius-lg: 16px;
      --radius-xl: 20px;
    }

    * {
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "SF Pro Display", "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      line-height: 1.5;
      max-width: 1400px;
      margin: 0 auto;
      padding: 32px 24px;
      color: var(--text-primary);
      background: var(--background);
      font-size: 16px;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    
    h1 {
      font-size: 48px;
      font-weight: 700;
      letter-spacing: -0.02em;
      margin: 0 0 16px 0;
      color: var(--text-primary);
      background: linear-gradient(135deg, var(--text-primary) 0%, var(--text-secondary) 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    h2 {
      font-size: 28px;
      font-weight: 600;
      letter-spacing: -0.01em;
      margin: 0 0 12px 0;
      color: var(--text-primary);
    }

    h3 {
      font-size: 20px;
      font-weight: 600;
      margin: 0 0 8px 0;
      color: var(--text-primary);
    }

    h4 {
      font-size: 16px;
      font-weight: 600;
      margin: 0 0 6px 0;
      color: var(--text-primary);
    }
    
    select {
      padding: 12px 16px;
      margin-bottom: 24px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      font-size: 16px;
      font-family: inherit;
      width: 100%;
      max-width: 400px;
      background: var(--surface);
      color: var(--text-primary);
      transition: all 0.2s ease;
      box-shadow: var(--shadow-sm);
    }

    select:focus {
      outline: none;
      border-color: var(--accent-blue);
      box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
    }
    
    .provider-section {
      margin-bottom: 24px;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-lg);
      padding: 0;
      background: var(--surface);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      transition: all 0.3s ease;
    }

    .provider-section:hover {
      box-shadow: var(--shadow-lg);
      transform: translateY(-2px);
    }
    
    .provider-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
      padding: 24px 28px;
      border-bottom: 1px solid var(--border-light);
      background: linear-gradient(135deg, var(--surface) 0%, var(--surface-secondary) 100%);
      transition: all 0.2s ease;
    }

    .provider-header:hover {
      background: linear-gradient(135deg, var(--surface-secondary) 0%, var(--surface-tertiary) 100%);
    }
    
    .provider-header h2 {
      margin: 0;
      padding: 0;
      color: var(--text-primary);
      font-size: 24px;
      font-weight: 600;
    }
    
    .provider-content {
      margin-top: 0;
      padding: 16px 28px 28px;
      background: var(--surface);
    }
    
    .model-section {
      margin: 16px 0;
      padding: 0;
      border-radius: var(--radius-md);
      background: var(--surface);
      border: 1px solid var(--border-light);
      overflow: hidden;
      transition: all 0.2s ease;
    }

    .model-section:hover {
      box-shadow: var(--shadow-sm);
      border-color: var(--border-medium);
    }
    
    .model-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0;
      color: var(--text-primary);
      border-bottom: 1px solid var(--border-light);
      padding: 20px 24px;
      cursor: pointer;
      background: var(--surface-secondary);
      transition: all 0.2s ease;
    }

    .model-header:hover {
      background: var(--surface-tertiary);
    }
    
    .model-header h3 {
      margin: 0;
      padding: 0;
      font-size: 18px;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .model-content {
      padding: 24px;
      background: var(--surface);
    }
    
    .collapse-icon {
      font-size: 20px;
      font-weight: normal;
      color: var(--text-secondary);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: rgba(0, 0, 0, 0.05);
    }

    .collapse-icon:hover {
      background: rgba(0, 0, 0, 0.1);
      color: var(--text-primary);
    }
    
    .collapsed .collapse-icon {
      transform: rotate(-90deg);
    }
    
    .results-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      margin-bottom: 16px;
      font-size: 15px;
      border-radius: var(--radius-md);
      overflow: hidden;
      border: 1px solid var(--border-light);
      background: var(--surface);
    }
    
    .results-table th, .results-table td {
      padding: 16px 20px;
      text-align: left;
      border-bottom: 1px solid var(--border-light);
    }

    .results-table th {
      background: var(--surface-secondary);
      font-weight: 600;
      font-size: 14px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      color: var(--text-secondary);
      border-bottom: 1px solid var(--border-medium);
    }

    .results-table tbody tr {
      transition: all 0.2s ease;
    }
    
    .results-table tbody tr:hover {
      background: var(--surface-secondary);
    }

    .results-table tbody tr:last-child td {
      border-bottom: none;
    }
    
    .success {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      color: var(--success);
      font-weight: 600;
      padding: 6px 12px;
      background: var(--success-bg);
      border-radius: var(--radius-sm);
      font-size: 13px;
      border: 1px solid rgba(40, 205, 65, 0.2);
    }
    
    .partial {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      color: var(--warning);
      font-weight: 600;
      padding: 6px 12px;
      background: var(--warning-bg);
      border-radius: var(--radius-sm);
      font-size: 13px;
      border: 1px solid rgba(255, 149, 0, 0.2);
    }
    
    .failure {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      color: var(--error);
      font-weight: 600;
      padding: 6px 12px;
      background: var(--error-bg);
      border-radius: var(--radius-sm);
      font-size: 13px;
      border: 1px solid rgba(255, 59, 48, 0.2);
    }
    
    .error {
      color: var(--error);
      padding: 16px;
      background: var(--error-bg);
      border-radius: var(--radius-md);
      margin: 16px 0;
      border: 1px solid rgba(255, 59, 48, 0.2);
    }
    
    .errors-section {
      margin: 16px 0;
    }
    
    .error-list {
      max-height: 400px;
      overflow-y: auto;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      background: var(--surface);
    }
    
    .error-item {
      padding: 16px;
      border-bottom: 1px solid var(--border-light);
      background: var(--error-bg);
    }
    
    .error-item:last-child {
      border-bottom: none;
      border-radius: 0 0 var(--radius-md) var(--radius-md);
    }

    .error-item:first-child {
      border-radius: var(--radius-md) var(--radius-md) 0 0;
    }

    .error-item:only-child {
      border-radius: var(--radius-md);
    }
    
    .error-item pre {
      margin: 0;
      white-space: pre-wrap;
      font-size: 14px;
      font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
      line-height: 1.5;
      color: var(--error);
    }
    
    .view-code-button, .view-samples-button {
      background: var(--accent-blue);
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: var(--radius-sm);
      cursor: pointer;
      font-size: 13px;
      font-weight: 500;
      font-family: inherit;
      transition: all 0.2s ease;
      box-shadow: var(--shadow-sm);
      display: inline-flex;
      align-items: center;
      gap: 4px;
      white-space: nowrap;
    }
    
    .view-code-button:hover, .view-samples-button:hover {
      background: var(--accent-blue-hover);
      transform: translateY(-1px);
      box-shadow: var(--shadow-md);
    }

    .view-code-button:active, .view-samples-button:active {
      transform: translateY(0);
      box-shadow: var(--shadow-sm);
    }
    
    /* GitHub link buttons */
    .github-button {
      background: var(--surface);
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
      padding: 8px 12px;
      border-radius: var(--radius-sm);
      cursor: pointer;
      font-size: 13px;
      font-weight: 500;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 4px;
      transition: all 0.2s ease;
      box-shadow: var(--shadow-sm);
      white-space: nowrap;
    }
    
    .github-button:hover {
      background: var(--surface-secondary);
      color: var(--text-primary);
      border-color: var(--border-medium);
      transform: translateY(-1px);
      box-shadow: var(--shadow-md);
    }

    .github-button:active {
      transform: translateY(0);
      box-shadow: var(--shadow-sm);
    }
    
    .button-group {
      display: flex;
      gap: 6px;
      flex-wrap: nowrap;
      align-items: center;
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(8px);
      animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .modal-content {
      background: var(--surface);
      margin: 5% auto;
      padding: 32px;
      border: none;
      width: 90%;
      max-width: 1200px;
      border-radius: var(--radius-xl);
      box-shadow: var(--shadow-lg);
      animation: slideUp 0.3s ease;
      position: relative;
    }

    @keyframes slideUp {
      from { 
        opacity: 0;
        transform: translateY(20px);
      }
      to { 
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .close {
      color: var(--text-secondary);
      position: absolute;
      top: 24px;
      right: 24px;
      font-size: 24px;
      font-weight: normal;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: var(--surface-secondary);
      transition: all 0.2s ease;
    }
    
    .close:hover {
      color: var(--text-primary);
      background: var(--surface-tertiary);
      transform: scale(1.1);
    }
    
    .code-container {
      background: var(--surface-secondary);
      padding: 20px;
      border-radius: var(--radius-md);
      overflow: auto;
      margin-top: 20px;
      border: 1px solid var(--border-light);
      font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    }
    
    .code-container pre {
      margin: 0;
      white-space: pre-wrap;
      font-size: 14px;
      line-height: 1.6;
      color: var(--text-primary);
    }
    
    .test-details {
      margin-top: 16px;
      padding-top: 16px;
      border-top: 1px solid #ddd;
    }
    
    .grouped-results {
      margin-top: 16px;
    }

    .no-results {
      margin: 20px 0;
      padding: 20px;
      background-color: #fff5f5;
      border-radius: 5px;
      color: #e53e3e;
    }
    
    /* Controls section */
    .controls {
      margin-bottom: 32px;
      display: flex;
      gap: 12px;
      align-items: center;
      padding: 20px;
      background: var(--surface);
      border-radius: var(--radius-md);
      border: 1px solid var(--border-light);
      box-shadow: var(--shadow-sm);
    }
    
    .expand-all-btn, .collapse-all-btn {
      background: var(--surface-secondary);
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-sm);
      padding: 10px 16px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      color: var(--text-primary);
      transition: all 0.2s ease;
      font-family: inherit;
    }
    
    .expand-all-btn:hover, .collapse-all-btn:hover {
      background: var(--surface-tertiary);
      transform: translateY(-1px);
      box-shadow: var(--shadow-sm);
    }

    .expand-all-btn:active, .collapse-all-btn:active {
      transform: translateY(0);
    }

    /* Back link for static pages */
    .back-link {
      margin-bottom: 32px;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 12px 20px;
      border-radius: var(--radius-md);
      background: var(--surface);
      border: 1px solid var(--border-medium);
      color: var(--text-primary);
      text-decoration: none;
      font-weight: 500;
      transition: all 0.2s ease;
      box-shadow: var(--shadow-sm);
    }
    
    .back-link:hover {
      background: var(--surface-secondary);
      transform: translateY(-1px);
      box-shadow: var(--shadow-md);
    }

    /* Benchmark list for index page */
    .benchmark-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .benchmark-item {
      padding: 20px 24px;
      margin-bottom: 16px;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      background: var(--surface);
      box-shadow: var(--shadow-sm);
      transition: all 0.2s ease;
    }

    .benchmark-item:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .benchmark-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .benchmark-link {
      text-decoration: none;
      color: var(--text-primary);
      font-size: 18px;
      font-weight: 600;
      transition: color 0.2s ease;
    }
    
    .benchmark-link:hover {
      color: var(--accent-blue);
    }
    
    .json-link {
      font-size: 14px;
      color: var(--text-secondary);
      text-decoration: none;
      padding: 6px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-sm);
      background: var(--surface-secondary);
      transition: all 0.2s ease;
    }
    
    .json-link:hover {
      color: var(--text-primary);
      background: var(--surface-tertiary);
      text-decoration: none;
    }

    .results-table th:last-child,
    .results-table td:last-child {
      width: 350px;
      max-width: 350px;
      white-space: nowrap;
    }

    
    /* HumanEval specific styles */
    .samples-container {
      margin-top: 24px;
    }
    
    .sample-item {
      margin-bottom: 16px;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      overflow: hidden;
      background: var(--surface);
      transition: all 0.2s ease;
    }

    .sample-item:hover {
      box-shadow: var(--shadow-sm);
      border-color: var(--border-medium);
    }
    
    .sample-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 20px;
      background: var(--surface-secondary);
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .sample-header:hover {
      background: var(--surface-tertiary);
    }
    
    .sample-header h4 {
      margin: 0;
      font-size: 16px;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .sample-header-right {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .sample-expand-icon {
      font-size: 18px;
      color: var(--text-secondary);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      user-select: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 20px;
      height: 20px;
    }
    
    .sample-item.expanded .sample-expand-icon {
      transform: rotate(90deg);
      color: var(--text-primary);
    }
    
    .sample-content {
      padding: 20px;
      display: none;
      max-height: 500px;
      overflow: auto;
      background: var(--surface);
      border-top: 1px solid var(--border-light);
    }
    
    .view-samples-button {
      background-color: #4299e1;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 13px;
    }
    
    .view-samples-button:hover {
      background-color: #3182ce;
    }
    
    .humaneval-metrics {
      display: flex;
      gap: 16px;
      margin-bottom: 16px;
      padding: 20px;
      background: var(--surface-secondary);
      border-radius: var(--radius-md);
      border: 1px solid var(--border-light);
      flex-wrap: wrap;
    }
    
    .metric {
      padding: 12px 16px;
      background: var(--surface);
      border-radius: var(--radius-sm);
      box-shadow: var(--shadow-sm);
      border: 1px solid var(--border-light);
      min-width: 120px;
      text-align: center;
    }
    
    .metric-label {
      font-weight: 600;
      color: var(--text-secondary);
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      display: block;
      margin-bottom: 4px;
    }

    .metric-value {
      font-size: 18px;
      font-weight: 700;
      color: var(--text-primary);
    }

    /* Context info styles */
    .context-info {
      margin: 32px 0;
      padding: 24px;
      background: var(--surface);
      border-radius: var(--radius-md);
      border: 1px solid var(--border-light);
      box-shadow: var(--shadow-sm);
    }

    .context-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
    }

    .context-filename {
      font-weight: 600;
      color: var(--text-primary);
      font-size: 18px;
    }

    .toggle-context-btn {
      background: var(--accent-blue);
      color: white;
      border: none;
      padding: 10px 16px;
      border-radius: var(--radius-sm);
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.2s ease;
      box-shadow: var(--shadow-sm);
    }

    .toggle-context-btn:hover {
      background: var(--accent-blue-hover);
      transform: translateY(-1px);
      box-shadow: var(--shadow-md);
    }

    .context-content {
      display: none;
      background: var(--surface-secondary);
      padding: 20px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-light);
      margin-top: 16px;
      max-height: 400px;
      overflow-y: auto;
      white-space: pre-wrap;
      font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
      font-size: 14px;
      line-height: 1.6;
    }

    /* Featured merged results styles */
    .featured-result {
      margin-bottom: 48px;
      padding: 40px;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-xl);
      background: linear-gradient(135deg, var(--surface) 0%, var(--surface-secondary) 100%);
      box-shadow: var(--shadow-lg);
      position: relative;
      overflow: hidden;
    }

    .featured-result::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, var(--accent-blue) 0%, var(--success) 100%);
    }

    .featured-header {
      display: flex;
      align-items: center;
      gap: 16px;
      margin-bottom: 20px;
    }

    .featured-badge {
      background: linear-gradient(135deg, var(--accent-blue) 0%, var(--success) 100%);
      color: white;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 1px;
      box-shadow: var(--shadow-sm);
    }

    .featured-title {
      font-size: 32px;
      font-weight: 700;
      color: var(--text-primary);
      margin: 0;
      letter-spacing: -0.01em;
    }

    .featured-description {
      color: var(--text-secondary);
      margin-bottom: 24px;
      font-size: 16px;
      line-height: 1.6;
    }

    .featured-links {
      display: flex;
      gap: 16px;
      flex-wrap: wrap;
    }

    .featured-link {
      display: inline-flex;
      align-items: center;
      gap: 10px;
      padding: 16px 24px;
      background: var(--accent-blue);
      color: white;
      text-decoration: none;
      border-radius: var(--radius-md);
      font-weight: 600;
      font-size: 16px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: var(--shadow-md);
    }

    .featured-link:hover {
      background: var(--accent-blue-hover);
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
    }

    .featured-link.secondary {
      background: var(--surface);
      color: var(--text-primary);
      border: 1px solid var(--border-medium);
    }

    .featured-link.secondary:hover {
      background: var(--surface-secondary);
      border-color: var(--border-medium);
    }

    /* Other results section */
    .other-results-section {
      margin-top: 48px;
    }

    .collapsible-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 24px;
      background: var(--surface);
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      cursor: pointer;
      transition: all 0.2s ease;
      box-shadow: var(--shadow-sm);
    }

    .collapsible-header:hover {
      background: var(--surface-secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-1px);
    }

    .collapsible-header h2 {
      margin: 0;
      color: var(--text-primary);
      font-size: 20px;
      font-weight: 600;
    }

    .collapsible-content {
      display: none;
      padding: 24px 0;
    }

    .collapsible-content.expanded {
      display: block;
    }

    .collapsible-icon {
      font-size: 20px;
      color: var(--text-secondary);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: rgba(0, 0, 0, 0.05);
    }

    .collapsible-header.expanded .collapsible-icon {
      transform: rotate(90deg);
      background: rgba(0, 0, 0, 0.1);
    }

    .other-results-count {
      color: var(--text-secondary);
      font-size: 14px;
      font-weight: 500;
      margin-left: 8px;
    }
  </style>
</head>
<body>
  <h1>SvelteBench Visualization</h1>

  <p>
    <i>Note: OpenAI thinking models (o3, o4) do not support temperature adjustments. o1-pro models use "medium" reasoning effort setting.</i>
  </p>
  
  <% if (typeof isIndexPage !== 'undefined' && isIndexPage === true) { %>
    <!-- Index page showing list of all benchmark results -->
    <% if (benchmarkFiles.length === 0) { %>
      <div class="no-results">
        <h2>No benchmark results found</h2>
        <p>Run the benchmark first using <code>npm start</code></p>
      </div>
    <% } else { %>
      <% 
        // Separate merged file from other files
        const mergedFile = benchmarkFiles.find(file => file.name.includes('merged'));
        const otherFiles = benchmarkFiles.filter(file => !file.name.includes('merged'));
      %>
      
      <% if (mergedFile) { %>
        <!-- Featured merged results -->
        <div class="featured-result">
          <div class="featured-header">
            <h2 class="featured-title">Latest Merged Results</h2>
          </div>
          <p class="featured-description">
            This file contains the most recent results from each model, automatically merged for easy comparison.
          </p>
          <div class="featured-links">
            <a href="<%= mergedFile.name.replace('.json', '.html') %>" class="featured-link">
              📊 View Results
            </a>
            <a href="<%= mergedFile.name %>" download class="featured-link secondary">
              📄 JSON
            </a>
          </div>
        </div>
      <% } %>

      <% if (otherFiles.length > 0) { %>
        <!-- Other results section -->
        <div class="other-results-section">
          <div class="collapsible-header" onclick="toggleOtherResults()">
            <h2>
              Raw Results 
              <span class="other-results-count">(<%= otherFiles.length %> files)</span>
            </h2>
            <span class="collapsible-icon">▶</span>
          </div>
          
          <div class="collapsible-content" id="other-results-content">
            <ul class="benchmark-list">
              <% otherFiles.forEach(file => { %>
                <li class="benchmark-item">
                  <div class="benchmark-row">
                    <a href="<%= file.name.replace('.json', '.html') %>" class="benchmark-link">
                      <%= file.name.replace('.json', '') %>
                    </a>
                    <a href="<%= file.name %>" download class="json-link">JSON</a>
                  </div>
                </li>
              <% }); %>
            </ul>
          </div>
        </div>
      <% } %>

      <% if (!mergedFile && otherFiles.length === 0) { %>
        <!-- This shouldn't happen, but just in case -->
        <div class="no-results">
          <h2>No valid benchmark results found</h2>
          <p>Run the benchmark first using <code>npm start</code></p>
        </div>
      <% } %>

      <script>
        // Toggle other results section visibility
        function toggleOtherResults() {
          const content = document.getElementById("other-results-content");
          const header = document.querySelector(".collapsible-header");
          const icon = document.querySelector(".collapsible-icon");
          
          if (content.classList.contains("expanded")) {
            content.classList.remove("expanded");
            header.classList.remove("expanded");
            icon.textContent = "▶";
          } else {
            content.classList.add("expanded");
            header.classList.add("expanded");
            icon.textContent = "▼";
          }
        }
      </script>
    <% } %>
  <% } else { %>
    <!-- Regular benchmark result page -->
    <% if (typeof isStaticBuild !== 'undefined' && isStaticBuild === true) { %>
      <!-- Static build version -->
      <a href="index.html" class="back-link">← Back to All Results</a>
    <% } else { %>
      <!-- Server version with dropdown -->
      <div>
        <label for="benchmark-select">Select Benchmark:</label>
        <select id="benchmark-select" onchange="window.location.href = '/?file=' + this.value">
          <% benchmarkFiles.forEach(file => { %>
            <option value="<%= file.name %>" <%= file.name === selectedFile ? 'selected' : '' %>>
              <%= file.name %>
            </option>
          <% }); %>
        </select>
      </div>
    <% } %>
    
    <!-- Display context information if available -->
    <% if (typeof contextInfo !== 'undefined' && contextInfo) { %>
      <div class="context-info">
        <div class="context-header">
          <h3>Context File: <%= contextInfo.filename %></h3>
          <button class="toggle-context-btn" onclick="toggleContextContent()">Show Context</button>
        </div>
        <div class="context-content" id="context-content">
          <%= contextInfo.content %>
        </div>
      </div>
    <% } %>
    
    <div class="controls">
      <button class="expand-all-btn" onclick="expandAll()">Expand All</button>
      <button class="collapse-all-btn" onclick="collapseAll()">Collapse All</button>
    </div>
    
    <% if (groupedResults.length > 0) { %>
      <div class="grouped-results">
        <% groupedResults.forEach(providerData => { %>
          <div class="provider-section" id="provider-<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>">
            <div class="provider-header" onclick="toggleProvider('<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>')">
              <h2><%= providerData.provider %></h2>
              <span class="collapse-icon">▼</span>
            </div>
            
            <div class="provider-content">
              <% Object.entries(providerData.models).forEach(([model, results]) => { %>
                <div class="model-section" id="model-<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>-<%= model.replace(/\s+/g, '-').toLowerCase() %>">
                  <div class="model-header" onclick="toggleModel('<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>', '<%= model.replace(/\s+/g, '-').toLowerCase() %>')">
                    <h3><%= model %></h3>
                    <span class="collapse-icon">▼</span>
                  </div>
                  
                  <div class="model-content">
                    <table class="results-table">
                      <tr>
                        <th>Test</th>
                        <th>Status</th>
                        <th>pass@1</th>
                        <th>pass@10</th>
                        <th>Passing Samples</th>
                        <th>Errors</th>
                        <th>Actions</th>
                      </tr>
                      
                      <!-- HumanEval Format -->
                      <% results.forEach((result, index) => { %>
                        <tr>
                          <td><%= result.testName %></td>
                          <td>
                            <% if (result.numCorrect === result.numSamples) { %>
                              <span class="success">✅ PASS</span>
                            <% } else if (result.numCorrect > 0) { %>
                              <span class="partial">⚠️ PARTIAL</span>
                            <% } else { %>
                              <span class="failure">❌ FAIL</span>
                            <% } %>
                          </td>
                          <td><%= result.pass1.toFixed(4) %></td>
                          <td><%= result.pass10.toFixed(4) %></td>
                          <td><%= result.numCorrect %>/<%= result.numSamples %></td>
                          <td>
                            <% 
                              const errorCount = result.samples.reduce((count, sample) => {
                                return count + (sample.errors ? sample.errors.length : 0);
                              }, 0);
                            %>
                            <% if (errorCount > 0) { %>
                              <span class="failure"><%= errorCount %></span>
                            <% } else { %>
                              0
                            <% } %>
                          </td>
                          <td>
                            <div class="button-group">
                              <button class="view-samples-button" 
                                      onclick="showSamplesModal('<%= providerData.provider %>', '<%= model %>', <%= index %>)">
                                View Samples
                              </button>
                              <a href="https://github.com/khromov/svelte-bench/blob/main/src/tests/<%= result.testName %>/prompt.md" 
                                 target="_blank" 
                                 class="github-button">
                                View Prompt
                              </a>
                              <a href="https://github.com/khromov/svelte-bench/blob/main/src/tests/<%= result.testName %>/test.ts" 
                                 target="_blank" 
                                 class="github-button">
                                View Tests
                              </a>
                            </div>
                          </td>
                        </tr>
                      <% }); %>
                    </table>
                  </div>
                </div>
              <% }); %>
            </div>
          </div>
        <% }); %>
      </div>
    <% } else { %>
      <div class="no-results">
        <h2>No benchmark results found</h2>
        <p>Run the benchmark first using <code>npm start</code></p>
      </div>
    <% } %>
    
    <!-- Modal for code view -->
    <div id="code-modal" class="modal">
      <div class="modal-content">
        <span id="close-modal" class="close">&times;</span>
        <h2 id="modal-title"></h2>
        <div class="code-container" id="code-display"></div>
      </div>
    </div>

    <!-- Modal for HumanEval samples view -->
    <div id="samples-modal" class="modal">
      <div class="modal-content">
        <span id="close-samples-modal" class="close">&times;</span>
        <h2 id="samples-modal-title"></h2>
        <div class="humaneval-metrics" id="samples-modal-metrics"></div>
        <div class="samples-container" id="samples-container"></div>
      </div>
    </div>

    <!-- Hidden element with base64 encoded benchmark data -->
    <div id="benchmark-data" style="display: none;" data-json="<%= benchmarkDataB64 %>"></div>

      <script>
        // Function to escape HTML for safe display
        function escapeHtml(unsafe) {
          return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
        }

        // Function to decode base64 data
        function decodeBase64Data() {
          const encodedData = document
            .getElementById("benchmark-data")
            .getAttribute("data-json");
          if (!encodedData) {
            console.error("No encoded data found");
            return [];
          }

          try {
            const jsonString = atob(encodedData);
            return JSON.parse(jsonString);
          } catch (error) {
            console.error("Error decoding benchmark data:", error);
            return [];
          }
        }

        // Toggle context content visibility
        function toggleContextContent() {
          const contextContent = document.getElementById("context-content");
          const toggleBtn = document.querySelector(".toggle-context-btn");
          
          if (contextContent.style.display === "block") {
            contextContent.style.display = "none";
            toggleBtn.textContent = "Show Context";
          } else {
            contextContent.style.display = "block";
            toggleBtn.textContent = "Hide Context";
          }
        }

        // Toggle other results section visibility
        function toggleOtherResults() {
          const content = document.getElementById("other-results-content");
          const header = document.querySelector(".collapsible-header");
          const icon = document.querySelector(".collapsible-icon");
          
          if (content.classList.contains("expanded")) {
            content.classList.remove("expanded");
            header.classList.remove("expanded");
            icon.textContent = "▶";
          } else {
            content.classList.add("expanded");
            header.classList.add("expanded");
            icon.textContent = "▼";
          }
        }

        // Function to show samples modal for HumanEval results
        function showSamplesModal(provider, model, resultIndex) {
          const samplesModal = document.getElementById("samples-modal");
          const samplesContainer = document.getElementById("samples-container");
          const modalTitle = document.getElementById("samples-modal-title");
          const modalMetrics = document.getElementById("samples-modal-metrics");

          // Get the benchmark data
          const benchmarkData = decodeBase64Data();

          // Find the result in the benchmark data
          let result = null;
          for (const providerData of benchmarkData) {
            if (providerData.provider === provider) {
              for (const [modelName, results] of Object.entries(providerData.models)) {
                if (modelName === model) {
                  result = results[resultIndex];
                  break;
                }
              }
              if (result) break;
            }
          }

          if (!result) {
            console.error("Result not found");
            return;
          }

          // Set the title with status
          let statusText = "";
          if (result.numCorrect === result.numSamples) {
            statusText = "✅ PASS";
          } else if (result.numCorrect > 0) {
            statusText = "⚠️ PARTIAL";
          } else {
            statusText = "❌ FAIL";
          }
          
          modalTitle.textContent = `${result.testName} - ${provider} ${model} (${statusText})`;
          
          // Add status class to the title
          if (result.numCorrect === result.numSamples) {
            modalTitle.className = "success";
          } else if (result.numCorrect > 0) {
            modalTitle.className = "partial";
          } else {
            modalTitle.className = "failure";
          }

          // Set the metrics with status indicator
          let statusClass = "";
          let statusEmoji = "";
          
          if (result.numCorrect === result.numSamples) {
            statusClass = "success";
            statusEmoji = "✅";
          } else if (result.numCorrect > 0) {
            statusClass = "partial";
            statusEmoji = "⚠️";
          } else {
            statusClass = "failure";
            statusEmoji = "❌";
          }
          
          modalMetrics.innerHTML = `
            <div class="metric ${statusClass}">
              <span class="metric-label">Status:</span> ${statusEmoji} ${result.numCorrect === result.numSamples ? 'PASS' : (result.numCorrect > 0 ? 'PARTIAL' : 'FAIL')}
            </div>
            <div class="metric">
              <span class="metric-label">pass@1:</span> ${result.pass1.toFixed(4)}
            </div>
            <div class="metric">
              <span class="metric-label">pass@10:</span> ${result.pass10.toFixed(4)}
            </div>
            <div class="metric">
              <span class="metric-label">Correct:</span> ${result.numCorrect}/${result.numSamples}
            </div>
          `;

          // Clear samples container
          samplesContainer.innerHTML = "";

          // Add each sample
          result.samples.forEach((sample, idx) => {
            const sampleDiv = document.createElement("div");
            sampleDiv.className = "sample-item";
            
            const header = document.createElement("div");
            header.className = "sample-header";
            
            // Temperature text - handle undefined temperature
            let tempText = '';
            if (sample.temperature !== undefined) {
              tempText = ` (temp: ${sample.temperature})`;
            } else {
              tempText = ' (default temp)';
            }
            
            header.innerHTML = `
              <h4>Sample ${sample.index + 1}${tempText}</h4>
              <div class="sample-header-right">
                <span class="${sample.success ? 'success' : 'failure'}">
                  ${sample.success ? '✅ PASS' : '❌ FAIL'}
                </span>
                <span class="sample-expand-icon">▶</span>
              </div>
            `;
            
            // Add click event to toggle visibility
            header.addEventListener("click", function() {
              const sampleItem = this.parentElement;
              const content = this.nextElementSibling;
              
              if (content.style.display === 'none' || content.style.display === '') {
                content.style.display = 'block';
                sampleItem.classList.add('expanded');
              } else {
                content.style.display = 'none';
                sampleItem.classList.remove('expanded');
              }
            });
            
            const content = document.createElement("div");
            content.className = "sample-content";
            content.innerHTML = `<pre><code class="language-svelte">${escapeHtml(sample.code)}</code></pre>`;
            
            // Add errors if any
            if (sample.errors && sample.errors.length > 0) {
              const errorsDiv = document.createElement("div");
              errorsDiv.className = "errors-section";
              errorsDiv.innerHTML = `
                <h4>Errors (${sample.errors.length})</h4>
                <div class="error-list">
                  ${sample.errors
                    .map(
                      (error) =>
                        `<div class="error-item">
                          <pre>${escapeHtml(error)}</pre>
                        </div>`
                    )
                    .join("")}
                </div>
              `;
              content.appendChild(errorsDiv);
            }
            
            sampleDiv.appendChild(header);
            sampleDiv.appendChild(content);
            samplesContainer.appendChild(sampleDiv);
          });

          // Show the modal
          samplesModal.style.display = "block";
        }

        // Toggle provider section visibility
        function toggleProvider(providerId) {
          const providerSection = document.getElementById(`provider-${providerId}`);
          const providerContent = providerSection.querySelector('.provider-content');
          const collapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
          
          if (providerContent.style.display === 'none') {
            // Expand
            providerContent.style.display = 'block';
            collapseIcon.textContent = '▼';
            providerSection.classList.remove('collapsed');
          } else {
            // Collapse
            providerContent.style.display = 'none';
            collapseIcon.textContent = '►';
            providerSection.classList.add('collapsed');
          }
        }
        
        // Toggle model section visibility
        function toggleModel(providerId, modelId) {
          const modelSection = document.getElementById(`model-${providerId}-${modelId}`);
          const modelContent = modelSection.querySelector('.model-content');
          const collapseIcon = modelSection.querySelector('.model-header .collapse-icon');
          
          if (modelContent.style.display === 'none') {
            // Expand
            modelContent.style.display = 'block';
            collapseIcon.textContent = '▼';
            modelSection.classList.remove('collapsed');
          } else {
            // Collapse
            modelContent.style.display = 'none';
            collapseIcon.textContent = '►';
            modelSection.classList.add('collapsed');
          }
          
          // Prevent the click from bubbling up to parent elements
          event.stopPropagation();
        }
        
        // Expand all sections
        function expandAll() {
          const providerSections = document.querySelectorAll('.provider-section');
          providerSections.forEach(providerSection => {
            const providerId = providerSection.id.replace('provider-', '');
            const providerContent = providerSection.querySelector('.provider-content');
            const providerCollapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
            
            providerContent.style.display = 'block';
            providerCollapseIcon.textContent = '▼';
            providerSection.classList.remove('collapsed');
            
            const modelSections = providerSection.querySelectorAll('.model-section');
            modelSections.forEach(modelSection => {
              const modelContent = modelSection.querySelector('.model-content');
              const modelCollapseIcon = modelSection.querySelector('.model-header .collapse-icon');
              
              modelContent.style.display = 'block';
              modelCollapseIcon.textContent = '▼';
              modelSection.classList.remove('collapsed');
            });
          });
        }
        
        // Collapse all sections
        function collapseAll() {
          const providerSections = document.querySelectorAll('.provider-section');
          providerSections.forEach(providerSection => {
            const providerId = providerSection.id.replace('provider-', '');
            const providerContent = providerSection.querySelector('.provider-content');
            const providerCollapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
            
            providerContent.style.display = 'none';
            providerCollapseIcon.textContent = '►';
            providerSection.classList.add('collapsed');
          });
        }

        // Initialize the page
        document.addEventListener("DOMContentLoaded", () => {
          // Close samples modal when clicking the close button
          const closeSamplesButton = document.getElementById("close-samples-modal");
          if (closeSamplesButton) {
            closeSamplesButton.addEventListener("click", () => {
              const samplesModal = document.getElementById("samples-modal");
              samplesModal.style.display = "none";
            });
          }

          // Close samples modal when clicking outside the modal content
          const samplesModal = document.getElementById("samples-modal");
          if (samplesModal) {
            samplesModal.addEventListener("click", (event) => {
              if (event.target === samplesModal) {
                samplesModal.style.display = "none";
              }
            });
          }
          
          // Initialize all sections as expanded
          expandAll();
        });
      </script>
  <% } %>
</body>
</html>