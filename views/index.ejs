<!DOCTYPE html>
<html>
<head>
  <title>SvelteBench Visualization</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      line-height: 1.5;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      color: #333;
    }
    
    h1, h2, h3, h4 {
      margin-top: 0;
    }
    
    select {
      padding: 8px;
      margin-bottom: 20px;
      border-radius: 4px;
      border: 1px solid #ddd;
      font-size: 16px;
      width: 100%;
      max-width: 400px;
    }
    
    .provider-section {
      margin-bottom: 30px;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 15px;
      background-color: #f8fafc;
    }
    
    .provider-section h2 {
      margin-top: 0;
      padding-bottom: 10px;
      border-bottom: 2px solid #e2e8f0;
      color: #2563eb;
    }
    
    .model-section {
      margin: 15px 0;
      padding: 15px;
      border-radius: 6px;
      background-color: #fff;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .model-section h3 {
      margin-top: 0;
      margin-bottom: 15px;
      color: #1e40af;
      border-bottom: 1px solid #e2e8f0;
      padding-bottom: 8px;
    }
    
    .results-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    
    .results-table th, .results-table td {
      padding: 12px 15px;
      border: 1px solid #ddd;
      text-align: left;
    }
    
    .results-table th {
      background-color: #f8f9fa;
      font-weight: bold;
    }
    
    .results-table tr:nth-child(even) {
      background-color: #f8f9fa;
    }
    
    .success {
      color: #2f855a;
      font-weight: bold;
    }
    
    .failure {
      color: #e53e3e;
      font-weight: bold;
    }
    
    .error {
      color: #e53e3e;
      padding: 15px;
      background-color: #fff5f5;
      border-radius: 5px;
      margin: 15px 0;
    }
    
    .errors-section {
      margin: 15px 0;
    }
    
    .error-list {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .error-item {
      padding: 10px;
      border-bottom: 1px solid #ddd;
      background-color: #fff5f5;
    }
    
    .error-item:last-child {
      border-bottom: none;
    }
    
    .error-item pre {
      margin: 0;
      white-space: pre-wrap;
      font-size: 14px;
    }
    
    .view-code-button {
      background-color: #4299e1;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
    
    .view-code-button:hover {
      background-color: #3182ce;
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.4);
    }
    
    .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 1000px;
      border-radius: 5px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    
    .close:hover {
      color: black;
    }
    
    .code-container {
      background-color: #f8f9fa;
      padding: 15px;
      border-radius: 5px;
      overflow: auto;
      margin-top: 15px;
    }
    
    .code-container pre {
      margin: 0;
      white-space: pre-wrap;
    }
    
    .test-details {
      margin-top: 20px;
      padding-top: 20px;
      border-top: 1px solid #ddd;
    }
    
    .grouped-results {
      margin-top: 20px;
    }

    .no-results {
      margin: 20px 0;
      padding: 20px;
      background-color: #fff5f5;
      border-radius: 5px;
      color: #e53e3e;
    }
  </style>
</head>
<body>
  <h1>SvelteBench Visualization</h1>
  
  <% if (benchmarkFiles.length === 0) { %>
    <div class="no-results">
      <h2>No benchmark results found</h2>
      <p>Run the benchmark first using <code>npm start</code></p>
    </div>
  <% } else { %>
    <div>
      <label for="benchmark-select">Select Benchmark:</label>
      <select id="benchmark-select" onchange="window.location.href = '/?file=' + this.value">
        <% benchmarkFiles.forEach(file => { %>
          <option value="<%= file.name %>" <%= file.name === selectedFile ? 'selected' : '' %>>
            <%= file.name %>
          </option>
        <% }); %>
      </select>
    </div>
    
    <% if (groupedResults.length > 0) { %>
      <div class="grouped-results">
        <% groupedResults.forEach(providerData => { %>
          <div class="provider-section">
            <h2><%= providerData.provider %></h2>
            
            <% Object.entries(providerData.models).forEach(([model, results]) => { %>
              <div class="model-section">
                <h3><%= model %></h3>
                
                <table class="results-table">
                  <tr>
                    <th>Test</th>
                    <th>Status</th>
                    <th>Tests Passed</th>
                    <th>Errors</th>
                    <th>View Code</th>
                  </tr>
                  
                  <% results.forEach((result, index) => { %>
                    <tr>
                      <td><%= result.testName %></td>
                      <td>
                        <% if (result.testResult.success) { %>
                          <span class="success">✅ PASS</span>
                        <% } else { %>
                          <span class="failure">❌ FAIL</span>
                        <% } %>
                      </td>
                      <td>
                        <%= result.testResult.totalTests - result.testResult.failedTests %>/<%= result.testResult.totalTests %>
                      </td>
                      <td>
                        <% const errorCount = result.testResult.errors ? result.testResult.errors.length : 0 %>
                        <% if (errorCount > 0) { %>
                          <span class="failure"><%= errorCount %></span>
                        <% } else { %>
                          0
                        <% } %>
                      </td>
                      <td>
                        <button class="view-code-button" 
                                onclick="showCodeModal('<%= providerData.provider %>', '<%= model %>', <%= index %>)">
                          View Code
                        </button>
                      </td>
                    </tr>
                  <% }); %>
                </table>
              </div>
            <% }); %>
          </div>
        <% }); %>
      </div>
    <% } %>
    
    <!-- Modal for code view -->
    <div id="code-modal" class="modal">
      <div class="modal-content">
        <span id="close-modal" class="close">&times;</span>
        <h2 id="modal-title"></h2>
        <div class="code-container" id="code-display"></div>
      </div>
    </div>

    <!-- Hidden element with base64 encoded benchmark data -->
    <div id="benchmark-data" style="display: none;" data-json="<%= benchmarkDataB64 %>"></div>
    
    <!-- Load external JavaScript file -->
    <script>
      // Function to escape HTML for safe display
      function escapeHtml(unsafe) {
        return unsafe
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }

      // Function to decode base64 data
      function decodeBase64Data() {
        const encodedData = document
          .getElementById("benchmark-data")
          .getAttribute("data-json");
        if (!encodedData) {
          console.error("No encoded data found");
          return [];
        }

        try {
          const jsonString = atob(encodedData);
          return JSON.parse(jsonString);
        } catch (error) {
          console.error("Error decoding benchmark data:", error);
          return [];
        }
      }

      // Function to show code modal
      function showCodeModal(provider, model, resultIndex) {
        const codeModal = document.getElementById("code-modal");
        const codeDisplay = document.getElementById("code-display");
        const modalTitle = document.getElementById("modal-title");

        // Get the benchmark data
        const benchmarkData = decodeBase64Data();

        // Find the result in the benchmark data
        let result = null;
        for (const providerData of benchmarkData) {
          if (providerData.provider === provider) {
            for (const [modelName, results] of Object.entries(providerData.models)) {
              if (modelName === model) {
                result = results[resultIndex];
                break;
              }
            }
            if (result) break;
          }
        }

        if (!result) {
          console.error("Result not found");
          return;
        }

        // Set the title and code content
        modalTitle.textContent = `${result.testName} (${
          result.testResult.success ? "PASS" : "FAIL"
        }) - ${result.llmProvider} ${result.modelIdentifier}`;

        // Format the code with syntax highlighting
        codeDisplay.innerHTML = `<pre><code class="language-svelte">${escapeHtml(
          result.generatedCode
        )}</code></pre>`;

        // Add test results details
        const testDetails = document.createElement("div");
        testDetails.className = "test-details";

        // Create errors section if there are errors
        let errorsHtml = "";
        if (result.testResult.errors && result.testResult.errors.length > 0) {
          errorsHtml = `
            <div class="errors-section">
              <h4>Errors (${result.testResult.errors.length})</h4>
              <div class="error-list">
                ${result.testResult.errors
                  .map(
                    (error) =>
                      `<div class="error-item">
                    <pre>${escapeHtml(error)}</pre>
                  </div>`
                  )
                  .join("")}
              </div>
            </div>
          `;
        }

        testDetails.innerHTML = `
          <h3>Test Results</h3>
          <p>LLM Provider: ${result.llmProvider || "N/A"}</p>
          <p>Model: ${result.modelIdentifier || "N/A"}</p>
          ${errorsHtml}
          <p>Total Tests: ${result.testResult.totalTests}</p>
          <p>Passed: ${
            result.testResult.totalTests - result.testResult.failedTests
          }</p>
          <p>Failed: ${result.testResult.failedTests}</p>
          <p>Generated at: ${new Date(result.timestamp).toLocaleString()}</p>
        `;
        codeDisplay.appendChild(testDetails);

        // Show the modal
        codeModal.style.display = "block";
      }

      // Initialize the page
      document.addEventListener("DOMContentLoaded", () => {
        // Close modal when clicking the close button
        const closeButton = document.getElementById("close-modal");
        if (closeButton) {
          closeButton.addEventListener("click", () => {
            const codeModal = document.getElementById("code-modal");
            codeModal.style.display = "none";
          });
        }

        // Close modal when clicking outside the modal content
        const codeModal = document.getElementById("code-modal");
        if (codeModal) {
          codeModal.addEventListener("click", (event) => {
            if (event.target === codeModal) {
              codeModal.style.display = "none";
            }
          });
        }
      });

    </script>
  <% } %>
</body>
</html>