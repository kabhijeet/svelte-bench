<!DOCTYPE html>
<html>
<head>
  <title>SvelteBench Visualization</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      line-height: 1.4;
      max-width: 1200px;
      margin: 0 auto;
      padding: 12px;
      color: #333;
    }
    
    h1, h2, h3, h4 {
      margin-top: 0;
      margin-bottom: 0.5rem;
    }
    
    select {
      padding: 6px;
      margin-bottom: 12px;
      border-radius: 4px;
      border: 1px solid #ddd;
      font-size: 14px;
      width: 100%;
      max-width: 400px;
    }
    
    .provider-section {
      margin-bottom: 16px;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      padding: 10px;
      background-color: #f8fafc;
    }
    
    .provider-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
      padding-bottom: 6px;
      border-bottom: 1px solid #e2e8f0;
      color: #2563eb;
    }
    
    .provider-header h2 {
      margin: 0;
      padding: 0;
    }
    
    .provider-content {
      margin-top: 8px;
      /* Collapsible content will be controlled by JS */
    }
    
    .model-section {
      margin: 8px 0;
      padding: 10px;
      border-radius: 6px;
      background-color: #fff;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }
    
    .model-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
      color: #1e40af;
      border-bottom: 1px solid #e2e8f0;
      padding-bottom: 6px;
      cursor: pointer;
    }
    
    .model-header h3 {
      margin: 0;
      padding: 0;
    }
    
    .model-content {
      /* Collapsible content will be controlled by JS */
    }
    
    .collapse-icon {
      font-size: 18px;
      font-weight: bold;
      transition: transform 0.2s;
    }
    
    .collapsed .collapse-icon {
      transform: rotate(-90deg);
    }
    
    .results-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 12px;
      font-size: 14px;
    }
    
    .results-table th, .results-table td {
      padding: 6px 10px;
      border: 1px solid #ddd;
      text-align: left;
    }
    
    .results-table th {
      background-color: #f8f9fa;
      font-weight: bold;
    }
    
    .results-table tr:nth-child(even) {
      background-color: #f8f9fa;
    }
    
    .success {
      color: #2f855a;
      font-weight: bold;
    }
    
    .failure {
      color: #e53e3e;
      font-weight: bold;
    }
    
    .error {
      color: #e53e3e;
      padding: 10px;
      background-color: #fff5f5;
      border-radius: 5px;
      margin: 10px 0;
    }
    
    .errors-section {
      margin: 10px 0;
    }
    
    .error-list {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .error-item {
      padding: 8px;
      border-bottom: 1px solid #ddd;
      background-color: #fff5f5;
    }
    
    .error-item:last-child {
      border-bottom: none;
    }
    
    .error-item pre {
      margin: 0;
      white-space: pre-wrap;
      font-size: 13px;
    }
    
    .view-code-button {
      background-color: #4299e1;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 13px;
    }
    
    .view-code-button:hover {
      background-color: #3182ce;
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.4);
    }
    
    .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 1000px;
      border-radius: 5px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    
    .close:hover {
      color: black;
    }
    
    .code-container {
      background-color: #f8f9fa;
      padding: 12px;
      border-radius: 5px;
      overflow: auto;
      margin-top: 12px;
    }
    
    .code-container pre {
      margin: 0;
      white-space: pre-wrap;
    }
    
    .test-details {
      margin-top: 16px;
      padding-top: 16px;
      border-top: 1px solid #ddd;
    }
    
    .grouped-results {
      margin-top: 16px;
    }

    .no-results {
      margin: 20px 0;
      padding: 20px;
      background-color: #fff5f5;
      border-radius: 5px;
      color: #e53e3e;
    }
    
    /* Controls section */
    .controls {
      margin-bottom: 16px;
      display: flex;
      gap: 10px;
      align-items: center;
    }
    
    .expand-all-btn, .collapse-all-btn {
      background-color: #edf2f7;
      border: 1px solid #cbd5e0;
      border-radius: 4px;
      padding: 6px 12px;
      cursor: pointer;
      font-size: 14px;
    }
    
    .expand-all-btn:hover, .collapse-all-btn:hover {
      background-color: #e2e8f0;
    }

    /* Back link for static pages */
    .back-link {
      margin-bottom: 16px;
      display: inline-block;
      padding: 5px 10px;
      border-radius: 4px;
      background-color: #edf2f7;
      border: 1px solid #cbd5e0;
      color: #333;
      text-decoration: none;
    }
    
    .back-link:hover {
      background-color: #e2e8f0;
    }

    /* Benchmark list for index page */
    .benchmark-list {
      list-style: none;
      padding: 0;
    }
    
    .benchmark-item {
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      background-color: #f8fafc;
    }
    
    .benchmark-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .benchmark-link {
      text-decoration: none;
      color: #2563eb;
      font-size: 16px;
    }
    
    .benchmark-link:hover {
      text-decoration: underline;
    }
    
    .json-link {
      font-size: 12px;
      color: #666;
      text-decoration: none;
    }
    
    .json-link:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <h1>SvelteBench Visualization</h1>
  
  <% if (typeof isIndexPage !== 'undefined' && isIndexPage === true) { %>
    <!-- Index page showing list of all benchmark results -->
    <% if (benchmarkFiles.length === 0) { %>
      <div class="no-results">
        <h2>No benchmark results found</h2>
        <p>Run the benchmark first using <code>npm start</code></p>
      </div>
    <% } else { %>
      <ul class="benchmark-list">
        <% benchmarkFiles.forEach(file => { %>
          <li class="benchmark-item">
            <div class="benchmark-row">
              <a href="<%= file.name.replace('.json', '.html') %>" class="benchmark-link">
                <%= file.name.replace('.json', '') %>
              </a>
              <a href="<%= file.name %>" download class="json-link">JSON</a>
            </div>
          </li>
        <% }); %>
      </ul>
    <% } %>
  <% } else { %>
    <!-- Regular benchmark result page -->
    <% if (typeof isStaticBuild !== 'undefined' && isStaticBuild === true) { %>
      <!-- Static build version -->
      <a href="index.html" class="back-link">← Back to All Results</a>
    <% } else { %>
      <!-- Server version with dropdown -->
      <div>
        <label for="benchmark-select">Select Benchmark:</label>
        <select id="benchmark-select" onchange="window.location.href = '/?file=' + this.value">
          <% benchmarkFiles.forEach(file => { %>
            <option value="<%= file.name %>" <%= file.name === selectedFile ? 'selected' : '' %>>
              <%= file.name %>
            </option>
          <% }); %>
        </select>
      </div>
    <% } %>
    
    <div class="controls">
      <button class="expand-all-btn" onclick="expandAll()">Expand All</button>
      <button class="collapse-all-btn" onclick="collapseAll()">Collapse All</button>
    </div>
    
    <% if (groupedResults.length > 0) { %>
      <div class="grouped-results">
        <% groupedResults.forEach(providerData => { %>
          <div class="provider-section" id="provider-<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>">
            <div class="provider-header" onclick="toggleProvider('<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>')">
              <h2><%= providerData.provider %></h2>
              <span class="collapse-icon">▼</span>
            </div>
            
            <div class="provider-content">
              <% Object.entries(providerData.models).forEach(([model, results]) => { %>
                <div class="model-section" id="model-<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>-<%= model.replace(/\s+/g, '-').toLowerCase() %>">
                  <div class="model-header" onclick="toggleModel('<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>', '<%= model.replace(/\s+/g, '-').toLowerCase() %>')">
                    <h3><%= model %></h3>
                    <span class="collapse-icon">▼</span>
                  </div>
                  
                  <div class="model-content">
                    <table class="results-table">
                      <tr>
                        <th>Test</th>
                        <th>Status</th>
                        <th>Tests Passed</th>
                        <th>Errors</th>
                        <th>View Code</th>
                      </tr>
                      
                      <% results.forEach((result, index) => { %>
                        <tr>
                          <td><%= result.testName %></td>
                          <td>
                            <% if (result.testResult.success) { %>
                              <span class="success">✅ PASS</span>
                            <% } else { %>
                              <span class="failure">❌ FAIL</span>
                            <% } %>
                          </td>
                          <td>
                            <%= result.testResult.totalTests - result.testResult.failedTests %>/<%= result.testResult.totalTests %>
                          </td>
                          <td>
                            <% const errorCount = result.testResult.errors ? result.testResult.errors.length : 0 %>
                            <% if (errorCount > 0) { %>
                              <span class="failure"><%= errorCount %></span>
                            <% } else { %>
                              0
                            <% } %>
                          </td>
                          <td>
                            <button class="view-code-button" 
                                    onclick="showCodeModal('<%= providerData.provider %>', '<%= model %>', <%= index %>)">
                              View Code
                            </button>
                          </td>
                        </tr>
                      <% }); %>
                    </table>
                  </div>
                </div>
              <% }); %>
            </div>
          </div>
        <% }); %>
      </div>
    <% } else { %>
      <div class="no-results">
        <h2>No benchmark results found</h2>
        <p>Run the benchmark first using <code>npm start</code></p>
      </div>
    <% } %>
    
    <!-- Modal for code view -->
    <div id="code-modal" class="modal">
      <div class="modal-content">
        <span id="close-modal" class="close">&times;</span>
        <h2 id="modal-title"></h2>
        <div class="code-container" id="code-display"></div>
      </div>
    </div>

    <!-- Hidden element with base64 encoded benchmark data -->
    <div id="benchmark-data" style="display: none;" data-json="<%= benchmarkDataB64 %>"></div>

      <script>
        // Function to escape HTML for safe display
        function escapeHtml(unsafe) {
          return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
        }

        // Function to decode base64 data
        function decodeBase64Data() {
          const encodedData = document
            .getElementById("benchmark-data")
            .getAttribute("data-json");
          if (!encodedData) {
            console.error("No encoded data found");
            return [];
          }

          try {
            const jsonString = atob(encodedData);
            return JSON.parse(jsonString);
          } catch (error) {
            console.error("Error decoding benchmark data:", error);
            return [];
          }
        }

        // Function to show code modal
        function showCodeModal(provider, model, resultIndex) {
          const codeModal = document.getElementById("code-modal");
          const codeDisplay = document.getElementById("code-display");
          const modalTitle = document.getElementById("modal-title");

          // Get the benchmark data
          const benchmarkData = decodeBase64Data();

          // Find the result in the benchmark data
          let result = null;
          for (const providerData of benchmarkData) {
            if (providerData.provider === provider) {
              for (const [modelName, results] of Object.entries(providerData.models)) {
                if (modelName === model) {
                  result = results[resultIndex];
                  break;
                }
              }
              if (result) break;
            }
          }

          if (!result) {
            console.error("Result not found");
            return;
          }

          // Set the title and code content
          modalTitle.textContent = `${result.testName} (${
            result.testResult.success ? "PASS" : "FAIL"
          }) - ${result.llmProvider} ${result.modelIdentifier}`;

          // Format the code with syntax highlighting
          codeDisplay.innerHTML = `<pre><code class="language-svelte">${escapeHtml(
            result.generatedCode
          )}</code></pre>`;

          // Add test results details
          const testDetails = document.createElement("div");
          testDetails.className = "test-details";

          // Create errors section if there are errors
          let errorsHtml = "";
          if (result.testResult.errors && result.testResult.errors.length > 0) {
            errorsHtml = `
              <div class="errors-section">
                <h4>Errors (${result.testResult.errors.length})</h4>
                <div class="error-list">
                  ${result.testResult.errors
                    .map(
                      (error) =>
                        `<div class="error-item">
                      <pre>${escapeHtml(error)}</pre>
                    </div>`
                    )
                    .join("")}
                </div>
              </div>
            `;
          }

          testDetails.innerHTML = `
            <h3>Test Results</h3>
            <p>LLM Provider: ${result.llmProvider || "N/A"}</p>
            <p>Model: ${result.modelIdentifier || "N/A"}</p>
            ${errorsHtml}
            <p>Total Tests: ${result.testResult.totalTests}</p>
            <p>Passed: ${
              result.testResult.totalTests - result.testResult.failedTests
            }</p>
            <p>Failed: ${result.testResult.failedTests}</p>
            <p>Generated at: ${new Date(result.timestamp).toLocaleString()}</p>
          `;
          codeDisplay.appendChild(testDetails);

          // Show the modal
          codeModal.style.display = "block";
        }

        // Toggle provider section visibility
        function toggleProvider(providerId) {
          const providerSection = document.getElementById(`provider-${providerId}`);
          const providerContent = providerSection.querySelector('.provider-content');
          const collapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
          
          if (providerContent.style.display === 'none') {
            // Expand
            providerContent.style.display = 'block';
            collapseIcon.textContent = '▼';
            providerSection.classList.remove('collapsed');
          } else {
            // Collapse
            providerContent.style.display = 'none';
            collapseIcon.textContent = '►';
            providerSection.classList.add('collapsed');
          }
        }
        
        // Toggle model section visibility
        function toggleModel(providerId, modelId) {
          const modelSection = document.getElementById(`model-${providerId}-${modelId}`);
          const modelContent = modelSection.querySelector('.model-content');
          const collapseIcon = modelSection.querySelector('.model-header .collapse-icon');
          
          if (modelContent.style.display === 'none') {
            // Expand
            modelContent.style.display = 'block';
            collapseIcon.textContent = '▼';
            modelSection.classList.remove('collapsed');
          } else {
            // Collapse
            modelContent.style.display = 'none';
            collapseIcon.textContent = '►';
            modelSection.classList.add('collapsed');
          }
          
          // Prevent the click from bubbling up to parent elements
          event.stopPropagation();
        }
        
        // Expand all sections
        function expandAll() {
          const providerSections = document.querySelectorAll('.provider-section');
          providerSections.forEach(providerSection => {
            const providerId = providerSection.id.replace('provider-', '');
            const providerContent = providerSection.querySelector('.provider-content');
            const providerCollapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
            
            providerContent.style.display = 'block';
            providerCollapseIcon.textContent = '▼';
            providerSection.classList.remove('collapsed');
            
            const modelSections = providerSection.querySelectorAll('.model-section');
            modelSections.forEach(modelSection => {
              const modelContent = modelSection.querySelector('.model-content');
              const modelCollapseIcon = modelSection.querySelector('.model-header .collapse-icon');
              
              modelContent.style.display = 'block';
              modelCollapseIcon.textContent = '▼';
              modelSection.classList.remove('collapsed');
            });
          });
        }
        
        // Collapse all sections
        function collapseAll() {
          const providerSections = document.querySelectorAll('.provider-section');
          providerSections.forEach(providerSection => {
            const providerId = providerSection.id.replace('provider-', '');
            const providerContent = providerSection.querySelector('.provider-content');
            const providerCollapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
            
            providerContent.style.display = 'none';
            providerCollapseIcon.textContent = '►';
            providerSection.classList.add('collapsed');
          });
        }

        // Initialize the page
        document.addEventListener("DOMContentLoaded", () => {
          // Close modal when clicking the close button
          const closeButton = document.getElementById("close-modal");
          if (closeButton) {
            closeButton.addEventListener("click", () => {
              const codeModal = document.getElementById("code-modal");
              codeModal.style.display = "none";
            });
          }

          // Close modal when clicking outside the modal content
          const codeModal = document.getElementById("code-modal");
          if (codeModal) {
            codeModal.addEventListener("click", (event) => {
              if (event.target === codeModal) {
                codeModal.style.display = "none";
              }
            });
          }
          
          // Initialize all sections as expanded
          expandAll();
        });
      </script>
  <% } %>
</body>
</html>