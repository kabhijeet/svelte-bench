<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SvelteBench Visualization</title>
  <%- include('styles') %>
</head>
<body>

  <h1>SvelteBench Visualization</h1>
  
  <% if (typeof isIndexPage !== 'undefined' && isIndexPage === true) { %>
    <!-- Index page showing list of all benchmark results -->
    <% if (benchmarkFiles.length === 0) { %>
      <div class="no-results">
        <h2>No benchmark results found</h2>
        <p>Run the benchmark first using <code>npm start</code></p>
      </div>
    <% } else { %>
      <% 
        // Separate merged file from other files
        const mergedFile = benchmarkFiles.find(file => file.name.includes('merged'));
        const otherFiles = benchmarkFiles.filter(file => !file.name.includes('merged'));
      %>
      
      <% if (mergedFile) { %>
        <!-- Featured merged results -->
        <div class="featured-result">
          <div class="featured-header">
            <h2 class="featured-title">Latest Merged Results</h2>
          </div>
          <p class="featured-description">
            This file contains the most recent results from each model, automatically merged for easy comparison.
          </p>
          <div class="featured-links">
            <a href="<%= mergedFile.name.replace('.json', '.html') %>" class="featured-link">
              üìä View Results
            </a>
            <a href="<%= mergedFile.name %>" download class="featured-link secondary">
              üìÑ JSON
            </a>
          </div>
        </div>
      <% } %>

      <% if (otherFiles.length > 0) { %>
        <!-- Other results section -->
        <div class="other-results-section">
          <div class="collapsible-header" onclick="toggleOtherResults()">
            <h2>
              Raw Results 
              <span class="other-results-count">(<%= otherFiles.length %> files)</span>
            </h2>
            <span class="collapsible-icon">‚ñ∂</span>
          </div>
          
          <div class="collapsible-content" id="other-results-content">
            <ul class="benchmark-list">
              <% otherFiles.forEach(file => { %>
                <li class="benchmark-item">
                  <div class="benchmark-row">
                    <a href="<%= file.name.replace('.json', '.html') %>" class="benchmark-link">
                      <%= file.name.replace('.json', '') %>
                    </a>
                    <a href="<%= file.name %>" download class="json-link">JSON</a>
                  </div>
                </li>
              <% }); %>
            </ul>
          </div>
        </div>
      <% } %>

      <% if (!mergedFile && otherFiles.length === 0) { %>
        <!-- This shouldn't happen, but just in case -->
        <div class="no-results">
          <h2>No valid benchmark results found</h2>
          <p>Run the benchmark first using <code>npm start</code></p>
        </div>
      <% } %>

      <script>
        // Toggle other results section visibility
        function toggleOtherResults() {
          const content = document.getElementById("other-results-content");
          const header = document.querySelector(".collapsible-header");
          const icon = document.querySelector(".collapsible-icon");
          
          if (content.classList.contains("expanded")) {
            content.classList.remove("expanded");
            header.classList.remove("expanded");
            icon.textContent = "‚ñ∂";
          } else {
            content.classList.add("expanded");
            header.classList.add("expanded");
            icon.textContent = "‚ñº";
          }
        }

        // No dark mode toggle - automatically uses device preference via CSS
      </script>
    <% } %>
  <% } else { %>
    <!-- Regular benchmark result page -->
    
    <% if (typeof isStaticBuild !== 'undefined' && isStaticBuild === true) { %>
      <!-- Static build version -->
      <div class="navigation-links">
        <a href="https://github.com/khromov/svelte-bench" target="_blank" class="github-repo-button">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
            <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"/>
          </svg>
        </a>
        <a href="index.html" class="back-link">View raw results ‚Üí</a>
      </div>
    <% } else { %>
      <!-- Server version with dropdown -->
      <div>
        <label for="benchmark-select">Select Benchmark:</label>
        <select id="benchmark-select" onchange="window.location.href = '/?file=' + this.value">
          <% benchmarkFiles.forEach(file => { %>
            <option value="<%= file.name %>" <%= file.name === selectedFile ? 'selected' : '' %>>
              <%= file.name %>
            </option>
          <% }); %>
        </select>
      </div>
    <% } %>
    
    <!-- Display context information if available -->
    <% if (typeof contextInfo !== 'undefined' && contextInfo) { %>
      <div class="context-info">
        <div class="context-header">
          <h3>Context File: <%= contextInfo.filename %></h3>
          <button class="toggle-context-btn" onclick="toggleContextContent()">Show Context</button>
        </div>
        <div class="context-content" id="context-content">
          <%= contextInfo.content %>
        </div>
      </div>
    <% } %>
    
    <%
    // Check if this is the merged results file and calculate top models
    let topModelsList = [];
    if (selectedFile && selectedFile.includes('merged') && groupedResults.length > 0) {
      const modelScores = new Map();
      
      // Iterate through all providers and models
      groupedResults.forEach(providerData => {
        Object.entries(providerData.models).forEach(([modelName, results]) => {
          // Calculate average pass@1 for this model
          let totalPass1 = 0;
          let testCount = 0;
          
          results.forEach(result => {
            totalPass1 += result.pass1;
            testCount++;
          });
          
          if (testCount > 0) {
            const avgPass1 = totalPass1 / testCount;
            modelScores.set(`${providerData.provider}|${modelName}`, {
              provider: providerData.provider,
              model: modelName,
              averagePass1: avgPass1,
              score: avgPass1 * 100 // Convert to percentage
            });
          }
        });
      });
      
      // Sort models by average pass@1 in descending order
      topModelsList = Array.from(modelScores.values())
        .sort((a, b) => b.averagePass1 - a.averagePass1);
    }
    %>
    
    <% if (topModelsList.length > 0) { %>
      <!-- Top models section for merged results -->
      <div class="top-models-section">
        <div class="top-models-header">
          <h2 class="top-models-title">üèÜ Top Models Leaderboard</h2>
          <span class="top-models-badge">Average pass@1 scores</span>
        </div>
        
        <!-- Search bar for models -->
        <div class="model-search-container">
          <input 
            type="text" 
            id="model-search-input" 
            class="model-search-input" 
            placeholder="Search models..." 
            autocomplete="off"
          />
          <span class="search-icon">üîç</span>
        </div>
        
        <table class="top-models-table">
          <thead>
            <tr>
              <th style="width: 60px; text-align: center;">Rank</th>
              <th>Model</th>
              <th style="width: 200px;">Score</th>
            </tr>
          </thead>
          <tbody id="top-models-tbody">
            <% topModelsList.forEach((model, index) => { %>
              <tr class="top-model-row <%= index >= 5 ? 'hidden-model' : '' %>" 
                  data-rank="<%= index + 1 %>"
                  data-model-name="<%= model.model.toLowerCase() %>"
                  data-provider-name="<%= model.provider.toLowerCase() %>">
                <td style="text-align: center;">
                  <span class="rank rank-<%= index + 1 %>"><%= index + 1 %></span>
                </td>
                <td>
                  <span class="model-name"><%= model.model %></span>
                  <span class="provider-name">(<%= model.provider %>)</span>
                </td>
                <td>
                  <div class="score-bar-container">
                    <div class="score-bar" style="width: <%= model.score %>%"></div>
                    <span class="score-text <%= model.score < 65 ? 'score-text-dark' : '' %>"><%= model.score.toFixed(1) %>%</span>
                  </div>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
        
        <div class="search-no-results" id="search-no-results" style="display: none;">
          <p>No models found matching your search.</p>
        </div>
        
        <% if (topModelsList.length > 5) { %>
          <div class="top-models-expand-container" id="expand-button-container">
            <button class="top-models-expand-btn" onclick="toggleTopModels()">
              <span class="expand-text">Show All <%= topModelsList.length %> Models</span>
              <span class="expand-icon">‚ñº</span>
            </button>
          </div>
        <% } %>
      </div>
    <% } %>
    
    <!-- Notes and Errata sections -->
    <div class="notes-box">
      <p>
        <i><strong>Note:</strong> Certain OpenAI thinking models (o3, o4) and gpt-5 do not support temperature adjustments (only default value of 1 is supported). Models with "-reasoning-" suffix (e.g., gpt-5-2025-08-07-reasoning-medium) will use the specified reasoning effort setting.</i>
      </p>
      
      <p>
        <i><strong>Errata:</strong> The "inspect" test has known correctness issues but is retained in the benchmark suite to maintain consistency and fairness in scoring across all evaluated models.</i>
      </p>
    </div>
    
    <div class="controls">
      <button class="expand-all-btn" onclick="expandAll()">Expand All</button>
      <button class="collapse-all-btn" onclick="collapseAll()">Collapse All</button>
    </div>
    
    <% if (groupedResults.length > 0) { %>
      <div class="grouped-results">
        <% groupedResults.forEach(providerData => { %>
          <div class="provider-section" id="provider-<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>">
            <div class="provider-header" onclick="toggleProvider('<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>')">
              <h2><%= providerData.provider %></h2>
              <span class="collapse-icon">‚ñº</span>
            </div>
            
            <div class="provider-content">
              <% Object.entries(providerData.models).forEach(([model, results]) => { %>
                <div class="model-section" id="model-<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>-<%= model.replace(/\s+/g, '-').toLowerCase() %>">
                  <div class="model-header" onclick="toggleModel('<%= providerData.provider.replace(/\s+/g, '-').toLowerCase() %>', '<%= model.replace(/\s+/g, '-').toLowerCase() %>')">
                    <h3><%= model %></h3>
                    <span class="collapse-icon">‚ñº</span>
                  </div>
                  
                  <div class="model-content">
                    <div class="table-scroll-wrapper">
                      <table class="results-table">
                      <tr>
                        <th>Test</th>
                        <th>Status</th>
                        <th>pass@1</th>
                        <th>pass@10</th>
                        <th>Passing Samples</th>
                        <th>Errors</th>
                        <th>Actions</th>
                      </tr>
                      
                      <!-- HumanEval Format -->
                      <% results.forEach((result, index) => { %>
                        <tr>
                          <td><%= result.testName %></td>
                          <td>
                            <% if (result.numCorrect === result.numSamples) { %>
                              <span class="success">‚úÖ PASS</span>
                            <% } else if (result.numCorrect > 0) { %>
                              <span class="partial">‚ö†Ô∏è PARTIAL</span>
                            <% } else { %>
                              <span class="failure">‚ùå FAIL</span>
                            <% } %>
                          </td>
                          <td><%= result.pass1.toFixed(4) %></td>
                          <td><%= result.pass10.toFixed(4) %></td>
                          <td><%= result.numCorrect %>/<%= result.numSamples %></td>
                          <td>
                            <% 
                              const errorCount = result.samples.reduce((count, sample) => {
                                return count + (sample.errors ? sample.errors.length : 0);
                              }, 0);
                            %>
                            <% if (errorCount > 0) { %>
                              <span class="failure"><%= errorCount %></span>
                            <% } else { %>
                              0
                            <% } %>
                          </td>
                          <td>
                            <div class="button-group">
                              <button class="view-samples-button" 
                                      onclick="showSamplesModal('<%= providerData.provider %>', '<%= model %>', <%= index %>)">
                                View Samples
                              </button>
                              <a href="https://github.com/khromov/svelte-bench/blob/main/src/tests/<%= result.testName %>/prompt.md" 
                                 target="_blank" 
                                 class="github-button">
                                View Prompt
                              </a>
                              <a href="https://github.com/khromov/svelte-bench/blob/main/src/tests/<%= result.testName %>/test.ts" 
                                 target="_blank" 
                                 class="github-button">
                                View Tests
                              </a>
                            </div>
                          </td>
                        </tr>
                      <% }); %>
                    </table>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          </div>
        <% }); %>
      </div>
    <% } else { %>
      <div class="no-results">
        <h2>No benchmark results found</h2>
        <p>Run the benchmark first using <code>npm start</code></p>
      </div>
    <% } %>
    
    <!-- Modal for code view -->
    <div id="code-modal" class="modal">
      <div class="modal-content">
        <span id="close-modal" class="close">&times;</span>
        <h2 id="modal-title"></h2>
        <div class="code-container" id="code-display"></div>
      </div>
    </div>

    <!-- Modal for HumanEval samples view -->
    <div id="samples-modal" class="modal">
      <div class="modal-content">
        <span id="close-samples-modal" class="close">&times;</span>
        <h2 id="samples-modal-title"></h2>
        <div class="humaneval-metrics" id="samples-modal-metrics"></div>
        <div class="samples-container" id="samples-container"></div>
      </div>
    </div>

    <!-- Hidden element with base64 encoded benchmark data -->
    <div id="benchmark-data" style="display: none;" data-json="<%= benchmarkDataB64 %>"></div>

      <script>
        // Function to escape HTML for safe display
        function escapeHtml(unsafe) {
          return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
        }

        // Function to decode base64 data
        function decodeBase64Data() {
          const encodedData = document
            .getElementById("benchmark-data")
            .getAttribute("data-json");
          if (!encodedData) {
            console.error("No encoded data found");
            return [];
          }

          try {
            const jsonString = atob(encodedData);
            return JSON.parse(jsonString);
          } catch (error) {
            console.error("Error decoding benchmark data:", error);
            return [];
          }
        }

        // Toggle top models visibility
        function toggleTopModels() {
          const hiddenRows = document.querySelectorAll('.hidden-model');
          const expandBtn = document.querySelector('.top-models-expand-btn');
          const expandText = expandBtn.querySelector('.expand-text');
          const expandIcon = expandBtn.querySelector('.expand-icon');
          
          if (hiddenRows.length > 0 && hiddenRows[0].style.display !== 'table-row') {
            // Show all models
            hiddenRows.forEach(row => {
              row.style.display = 'table-row';
            });
            expandText.textContent = 'Show Top 5 Models';
            expandIcon.textContent = '‚ñ≤';
            expandBtn.classList.add('expanded');
          } else {
            // Hide models beyond top 5
            hiddenRows.forEach(row => {
              row.style.display = 'none';
            });
            expandText.textContent = `Show All ${document.querySelectorAll('.top-model-row').length} Models`;
            expandIcon.textContent = '‚ñº';
            expandBtn.classList.remove('expanded');
          }
        }

        // Toggle context content visibility
        function toggleContextContent() {
          const contextContent = document.getElementById("context-content");
          const toggleBtn = document.querySelector(".toggle-context-btn");
          
          if (contextContent.style.display === "block") {
            contextContent.style.display = "none";
            toggleBtn.textContent = "Show Context";
          } else {
            contextContent.style.display = "block";
            toggleBtn.textContent = "Hide Context";
          }
        }

        // Toggle other results section visibility
        function toggleOtherResults() {
          const content = document.getElementById("other-results-content");
          const header = document.querySelector(".collapsible-header");
          const icon = document.querySelector(".collapsible-icon");
          
          if (content.classList.contains("expanded")) {
            content.classList.remove("expanded");
            header.classList.remove("expanded");
            icon.textContent = "‚ñ∂";
          } else {
            content.classList.add("expanded");
            header.classList.add("expanded");
            icon.textContent = "‚ñº";
          }
        }

        // Function to show samples modal for HumanEval results
        function showSamplesModal(provider, model, resultIndex) {
          const samplesModal = document.getElementById("samples-modal");
          const samplesContainer = document.getElementById("samples-container");
          const modalTitle = document.getElementById("samples-modal-title");
          const modalMetrics = document.getElementById("samples-modal-metrics");

          // Get the benchmark data
          const benchmarkData = decodeBase64Data();

          // Find the result in the benchmark data
          let result = null;
          for (const providerData of benchmarkData) {
            if (providerData.provider === provider) {
              for (const [modelName, results] of Object.entries(providerData.models)) {
                if (modelName === model) {
                  result = results[resultIndex];
                  break;
                }
              }
              if (result) break;
            }
          }

          if (!result) {
            console.error("Result not found");
            return;
          }

          // Set the title with status
          let statusText = "";
          if (result.numCorrect === result.numSamples) {
            statusText = "‚úÖ PASS";
          } else if (result.numCorrect > 0) {
            statusText = "‚ö†Ô∏è PARTIAL";
          } else {
            statusText = "‚ùå FAIL";
          }
          
          modalTitle.textContent = `${result.testName} - ${provider} ${model} (${statusText})`;
          
          // Add status class to the title
          if (result.numCorrect === result.numSamples) {
            modalTitle.className = "success";
          } else if (result.numCorrect > 0) {
            modalTitle.className = "partial";
          } else {
            modalTitle.className = "failure";
          }

          // Set the metrics with status indicator
          let statusClass = "";
          let statusEmoji = "";
          
          if (result.numCorrect === result.numSamples) {
            statusClass = "success";
            statusEmoji = "‚úÖ";
          } else if (result.numCorrect > 0) {
            statusClass = "partial";
            statusEmoji = "‚ö†Ô∏è";
          } else {
            statusClass = "failure";
            statusEmoji = "‚ùå";
          }
          
          modalMetrics.innerHTML = `
            <div class="metric ${statusClass}">
              <span class="metric-label">Status:</span> ${statusEmoji} ${result.numCorrect === result.numSamples ? 'PASS' : (result.numCorrect > 0 ? 'PARTIAL' : 'FAIL')}
            </div>
            <div class="metric">
              <span class="metric-label">pass@1:</span> ${result.pass1.toFixed(4)}
            </div>
            <div class="metric">
              <span class="metric-label">pass@10:</span> ${result.pass10.toFixed(4)}
            </div>
            <div class="metric">
              <span class="metric-label">Correct:</span> ${result.numCorrect}/${result.numSamples}
            </div>
          `;

          // Clear samples container
          samplesContainer.innerHTML = "";

          // Add each sample
          result.samples.forEach((sample, idx) => {
            const sampleDiv = document.createElement("div");
            sampleDiv.className = "sample-item";
            
            const header = document.createElement("div");
            header.className = "sample-header";
            
            // Temperature text - handle undefined temperature
            let tempText = '';
            if (sample.temperature !== undefined) {
              tempText = ` (temp: ${sample.temperature})`;
            } else {
              tempText = ' (default temp)';
            }
            
            header.innerHTML = `
              <h4>Sample ${sample.index + 1}${tempText}</h4>
              <div class="sample-header-right">
                <span class="${sample.success ? 'success' : 'failure'}">
                  ${sample.success ? '‚úÖ PASS' : '‚ùå FAIL'}
                </span>
                <span class="sample-expand-icon">‚ñ∂</span>
              </div>
            `;
            
            // Add click event to toggle visibility
            header.addEventListener("click", function() {
              const sampleItem = this.parentElement;
              const content = this.nextElementSibling;
              
              if (content.style.display === 'none' || content.style.display === '') {
                content.style.display = 'block';
                sampleItem.classList.add('expanded');
              } else {
                content.style.display = 'none';
                sampleItem.classList.remove('expanded');
              }
            });
            
            const content = document.createElement("div");
            content.className = "sample-content";
            content.innerHTML = `<pre><code class="language-svelte">${escapeHtml(sample.code)}</code></pre>`;
            
            // Add errors if any
            if (sample.errors && sample.errors.length > 0) {
              const errorsDiv = document.createElement("div");
              errorsDiv.className = "errors-section";
              errorsDiv.innerHTML = `
                <h4>Errors (${sample.errors.length})</h4>
                <div class="error-list">
                  ${sample.errors
                    .map(
                      (error) =>
                        `<div class="error-item">
                          <pre>${escapeHtml(error)}</pre>
                        </div>`
                    )
                    .join("")}
                </div>
              `;
              content.appendChild(errorsDiv);
            }
            
            sampleDiv.appendChild(header);
            sampleDiv.appendChild(content);
            samplesContainer.appendChild(sampleDiv);
          });

          // Show the modal
          samplesModal.style.display = "block";
        }

        // Toggle provider section visibility
        function toggleProvider(providerId) {
          const providerSection = document.getElementById(`provider-${providerId}`);
          const providerContent = providerSection.querySelector('.provider-content');
          const collapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
          
          if (providerContent.style.display === 'none') {
            // Expand
            providerContent.style.display = 'block';
            collapseIcon.textContent = '‚ñº';
            providerSection.classList.remove('collapsed');
          } else {
            // Collapse
            providerContent.style.display = 'none';
            collapseIcon.textContent = '‚ñ∫';
            providerSection.classList.add('collapsed');
          }
        }
        
        // Toggle model section visibility
        function toggleModel(providerId, modelId) {
          const modelSection = document.getElementById(`model-${providerId}-${modelId}`);
          const modelContent = modelSection.querySelector('.model-content');
          const collapseIcon = modelSection.querySelector('.model-header .collapse-icon');
          
          if (modelContent.style.display === 'none') {
            // Expand
            modelContent.style.display = 'block';
            collapseIcon.textContent = '‚ñº';
            modelSection.classList.remove('collapsed');
          } else {
            // Collapse
            modelContent.style.display = 'none';
            collapseIcon.textContent = '‚ñ∫';
            modelSection.classList.add('collapsed');
          }
          
          // Prevent the click from bubbling up to parent elements
          event.stopPropagation();
        }
        
        // Expand all sections
        function expandAll() {
          const providerSections = document.querySelectorAll('.provider-section');
          providerSections.forEach(providerSection => {
            const providerId = providerSection.id.replace('provider-', '');
            const providerContent = providerSection.querySelector('.provider-content');
            const providerCollapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
            
            providerContent.style.display = 'block';
            providerCollapseIcon.textContent = '‚ñº';
            providerSection.classList.remove('collapsed');
            
            const modelSections = providerSection.querySelectorAll('.model-section');
            modelSections.forEach(modelSection => {
              const modelContent = modelSection.querySelector('.model-content');
              const modelCollapseIcon = modelSection.querySelector('.model-header .collapse-icon');
              
              modelContent.style.display = 'block';
              modelCollapseIcon.textContent = '‚ñº';
              modelSection.classList.remove('collapsed');
            });
          });
        }
        
        // Collapse all sections
        function collapseAll() {
          const providerSections = document.querySelectorAll('.provider-section');
          providerSections.forEach(providerSection => {
            const providerId = providerSection.id.replace('provider-', '');
            const providerContent = providerSection.querySelector('.provider-content');
            const providerCollapseIcon = providerSection.querySelector('.provider-header .collapse-icon');
            
            providerContent.style.display = 'none';
            providerCollapseIcon.textContent = '‚ñ∫';
            providerSection.classList.add('collapsed');
          });
        }

        // Model search functionality
        function initializeModelSearch() {
          const searchInput = document.getElementById('model-search-input');
          const expandButton = document.getElementById('expand-button-container');
          const noResultsDiv = document.getElementById('search-no-results');
          
          if (!searchInput) return;
          
          // Check for search query param on load
          const urlParams = new URLSearchParams(window.location.search);
          const searchQuery = urlParams.get('search');
          if (searchQuery) {
            searchInput.value = searchQuery;
            performSearch(searchQuery);
          }
          
          // Add search event listener
          searchInput.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            performSearch(query);
            
            // Update URL with search query
            const url = new URL(window.location);
            if (query) {
              url.searchParams.set('search', query);
            } else {
              url.searchParams.delete('search');
            }
            window.history.replaceState({}, '', url);
          });
          
          function performSearch(query) {
            const rows = document.querySelectorAll('.top-model-row');
            let visibleCount = 0;
            
            if (query === '') {
              // Reset to default state
              rows.forEach((row, index) => {
                row.style.display = index < 5 ? 'table-row' : 'none';
                if (index < 5) visibleCount++;
              });
              
              // Show expand button again
              if (expandButton) {
                expandButton.style.display = 'block';
                const expandBtn = expandButton.querySelector('.top-models-expand-btn');
                const expandText = expandBtn.querySelector('.expand-text');
                const expandIcon = expandBtn.querySelector('.expand-icon');
                expandText.textContent = `Show All ${rows.length} Models`;
                expandIcon.textContent = '‚ñº';
                expandBtn.classList.remove('expanded');
              }
              
              noResultsDiv.style.display = 'none';
            } else {
              // Show all models when searching
              const lowerQuery = query.toLowerCase();
              
              rows.forEach((row) => {
                const modelName = row.getAttribute('data-model-name');
                const providerName = row.getAttribute('data-provider-name');
                const matches = modelName.includes(lowerQuery) || providerName.includes(lowerQuery);
                
                row.style.display = matches ? 'table-row' : 'none';
                if (matches) visibleCount++;
              });
              
              // Hide expand button when searching
              if (expandButton) {
                expandButton.style.display = 'none';
              }
              
              // Show no results message if needed
              noResultsDiv.style.display = visibleCount === 0 ? 'block' : 'none';
            }
          }
        }

        // No dark mode toggle - automatically uses device preference via CSS

        // Initialize the page
        document.addEventListener("DOMContentLoaded", () => {
          // Initialize model search
          initializeModelSearch();
          
          // Hide models beyond top 5 on initial load (unless there's a search query)
          const urlParams = new URLSearchParams(window.location.search);
          const hasSearchQuery = urlParams.get('search');
          
          if (!hasSearchQuery) {
            const hiddenModels = document.querySelectorAll('.hidden-model');
            hiddenModels.forEach(row => {
              row.style.display = 'none';
            });
          }

          // Close samples modal when clicking the close button
          const closeSamplesButton = document.getElementById("close-samples-modal");
          if (closeSamplesButton) {
            closeSamplesButton.addEventListener("click", () => {
              const samplesModal = document.getElementById("samples-modal");
              samplesModal.style.display = "none";
            });
          }

          // Close samples modal when clicking outside the modal content
          const samplesModal = document.getElementById("samples-modal");
          if (samplesModal) {
            samplesModal.addEventListener("click", (event) => {
              if (event.target === samplesModal) {
                samplesModal.style.display = "none";
              }
            });
          }
          
          // Initialize all sections as expanded
          expandAll();
        });
      </script>
  <% } %>
</body>
</html>