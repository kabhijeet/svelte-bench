[
  {
    "testName": "counter",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 1,
    "pass1": 0.09999999999999998,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0\n</script>\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => $state.count--}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={() => $state.count++}>+</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => $state.count--}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={() => $state.count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0;\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n</script>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n</style>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n$state count = 0\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n.counter {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const state = $state({ count: 0 });\n  function increment() {\n    state.count += 1;\n  }\n  function decrement() {\n    state.count -= 1;\n  }\n</script>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": false,
        "errors": [
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const count = $state(0)\n  function increment() {\n    count = count + 1\n  }\n  function decrement() {\n    count = count - 1\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:4 Cannot assign to constant\nhttps://svelte.dev/e/constant_assignment"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const [count, setCount] = $state(0)\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => setCount(count - 1)}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => setCount(count + 1)}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:18 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0\n  const increment = () => count++\n  const decrement = () => count--\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5)\n  const doubled = $derived(number, $ => $ * 2)\n</script>\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:18 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5\n  $derived doubled = () => number * 2\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const count = $state(5)\n  const doubled = $derived(count, n => n * 2)\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {count}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => count++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5\n  $derived doubled = number * 2\n</script>\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5\n  $derived doubled = () => number * 2\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /tmp/openai/Component.svelte (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/Component.svelte) in /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts. Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5)\n  const doubled = $derived(number, n => n * 2)\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.update(n => n + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:18 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script runes>\n$state number = 5\n$derived doubled = () => number * 2\n</script>\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:7 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte/runes';\n\n  const number = $state(5);\n  const doubled = $derived(number, n => n * 2);\n\n  const increment = () => {\n    number(number() + 1);\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5)\n  let doubled = $derived(number, v => v * 2)\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const count = $state(5)\n  const doubled = $derived(count, $c => $c * 2)\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$count}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => count.update(n => n + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:18 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state('');\n  const { wordCount, charCount, isLong } = $derived.by(text, t => {\n    const words = t.trim().split(/\\s+/).filter(Boolean).length;\n    return {\n      wordCount: words,\n      charCount: t.length,\n      isLong: words > 15\n    };\n  });\n  function clearText() {\n    text.set('');\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" value={text()} on:input={e => text.set(e.target.value)} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount()}</p>\n    <p data-testid=\"char-count\">Characters: {charCount()}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong() ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /tmp/openai/Component.svelte (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/Component.svelte) in /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts. Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script runes>\n  const text = $state('');\n  const { wordCount, charCount, isLong } = $derived.by(text, t => {\n    const words = t.trim() ? t.trim().split(/\\s+/).length : 0;\n    return {\n      wordCount: words,\n      charCount: t.length,\n      isLong: words > 15\n    };\n  });\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:43 `$derived.by` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"\";\n  $derived.by [wordCount, charCount, isLong] = text => {\n    const words = text.trim() ? text.trim().split(/\\s+/).length : 0;\n    const chars = text.length;\n    const long = words > 15;\n    return [words, chars, long];\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = \"\"}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"word-count\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCurrent text: Hello world\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCharacter count: 11\u001b[0m\n      \u001b[36m</p>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"word-count\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCurrent text: Hello worldHello world\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCharacter count: 22\u001b[0m\n      \u001b[36m</p>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"clear-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCurrent text: Hello world\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCharacter count: 11\u001b[0m\n      \u001b[36m</p>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"\"\n  $derived.by { wordCount, charCount, isLong } from text => {\n    const words = text.trim().split(/\\s+/).filter(Boolean)\n    return {\n      wordCount: words.length,\n      charCount: text.length,\n      isLong: words.length > 15\n    }\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = \"\"}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? \"Long text\" : \"Short text\"}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = '';\n  $derived.by(() => {\n    const trimmed = text.trim();\n    return trimmed ? trimmed.split(/\\s+/).length : 0;\n  }, [text]) wordCount;\n  $derived.by(() => text.length, [text]) charCount;\n  $derived.by(() => wordCount > 15, [wordCount]) isLong;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:7 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"\";\n  $derived.by [text] ([t]) => {\n    const trimmed = t.trim();\n    const words = trimmed ? trimmed.split(/\\s+/).length : 0;\n    const chars = t.length;\n    const isLong = words > 15;\n    return { words, chars, isLong };\n  };\n</script>\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = \"\"}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {words}</p>\n    <p data-testid=\"char-count\">Characters: {chars}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? \"Long text\" : \"Short text\"}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:60 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = ''\n  $state wordCount = 0\n  $state charCount = 0\n  $state isLong = false\n\n  $derived.by(() => [text], ([t]) => {\n    const count = t.trim().split(/\\s+/).filter(Boolean).length\n    wordCount = count\n    charCount = t.length\n    isLong = count > 15\n  })\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /tmp/openai/Component.svelte (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/Component.svelte) in /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts. Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script runes>\n$state text = \"\";\n$derived.by(text, txt => {\n  const words = txt.trim().split(/\\s+/).filter(Boolean);\n  return {\n    wordCount: words.length,\n    charCount: txt.length,\n    isLong: words.length > 15\n  };\n}) stats;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = \"\"}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? \"Long text\" : \"Short text\"}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"\"\n  $derived.by(text, $text => $text.trim() ? $text.trim().split(/\\s+/).length : 0) wordCount\n  $derived.by(text, $text => $text.length) charCount\n  $derived.by(wordCount, $wc => $wc > 15) isLong\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = \"\"}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? \"Long text\" : \"Short text\"}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = ''\n\n  const { wordCount, charCount, isLong } = $derived.by(text, txt => {\n    const words = txt.trim() ? txt.trim().split(/\\s+/).length : 0\n    return {\n      wordCount: words,\n      charCount: txt.length,\n      isLong: words > 15\n    }\n  })\n\n  function clearText() {\n    text = ''\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" bind:value={text} type=\"text\" />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "each",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 1,
    "pass1": 0.09999999999999998,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script runes>\n$state characters = [\"Jerry\", \"Elaine\", \"Kramer\"]\n</script>\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters = [...characters, \"George\"]}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:7 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state characters = [\"Jerry\", \"Elaine\", \"Kramer\"]\n  function addGeorge() {\n    characters = [...characters, \"George\"]\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script $state>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"])\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters.push(\"George\")}>\n    Add George\n  </button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state characters = [\"Jerry\", \"Elaine\", \"Kramer\"]\n  function addGeorge() {\n    characters = [...characters, \"George\"]\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state characters = ['Jerry', 'Elaine', 'Kramer'];\n</script>\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters = [...characters, 'George']}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state characters = [\"Jerry\", \"Elaine\", \"Kramer\"]\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters = [...characters, \"George\"]}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state characters = [\"Jerry\", \"Elaine\", \"Kramer\"]\n  function addGeorge() {\n    characters = [...characters, \"George\"]\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script setup>\n  $state characters = [\"Jerry\", \"Elaine\", \"Kramer\"]\n  function addGeorge() {\n    characters = [...characters, \"George\"]\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nconst count = $state(5)\nconst doubled = $state(0)\n\n$effect(() => {\n  doubled.set(count.value * 2)\n})\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {count.value}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled.value}</p>\n  <button data-testid=\"increment-button\" on:click={() => count.set(count.value + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "doubled.set is not a function\n\n\tin $effect\n\tin Component.svelte\n",
          "doubled.set is not a function\n\n\tin $effect\n\tin Component.svelte\n"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5\n  $state doubled = number * 2\n  $effect(() => {\n    doubled = number * 2\n  })\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script runes=\"$state $effect\">\n  let number = $state(5)\n  let doubled\n  $effect(() => {\n    doubled = number * 2\n  })\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from 'svelte/runes';\n  const number = $state(5);\n  const doubled = $state(0);\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5)\n  const doubled = $state(0)\n\n  $effect(() => {\n    doubled.value = number.value * 2\n  })\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number.value}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled.value}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.value++}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script runes>\n  const [number, setNumber] = $state(5)\n  let doubled\n  $effect(() => {\n    doubled = number * 2\n  })\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => setNumber(number + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script runes>\n  $state number = 5\n  $state doubled = 0\n  $effect(() => {\n    doubled = number * 2\n  })\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5\n  $state doubled = 0\n  $effect(() => {\n    doubled = number * 2\n  })\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\nconst number = $state(5)\nconst doubled = $state(0)\n$effect(() => {\n  doubled = number * 2\n})\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:7:2 Cannot assign to constant\nhttps://svelte.dev/e/constant_assignment"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5\n  $state doubled = 0\n\n  $effect(() => {\n    doubled = number * 2\n  })\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 10,
    "pass1": 1,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n.greeting {\n  color: blue;\n  text-align: center;\n  margin: 1rem;\n}\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script needed\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"Hello world\";\n\n  $inspect(text);\n  $inspect(text).with(value => console.log(\"Text updated to:\", value));\n\n  $effect(() => {\n    $inspect.trace();\n    text;\n  });\n</script>\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state(\"Hello world\")\n\n  $inspect(text)\n  $inspect(text).with(val => console.log(\"Input updated to:\", val))\n\n  $effect(() => {\n    $inspect.trace()\n  }, [text])\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:9:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"Hello world\"\n  $inspect(text)\n  $inspect(text).with((value, old) => console.log(Text changed from ${old} to ${value}))\n  $effect(text) {\n    $inspect.trace()\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"Hello world\"\n  $inspect(text)\n  $inspect(text).with(value => console.log(\"Custom update:\", value))\n  $effect(() => {\n    $inspect.trace()\n    text\n  })\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = 'Hello world'\n\n  $inspect(text)\n  $inspect(text).with(value => console.log('Custom inspector callback:', value))\n\n  $effect(() => {\n    $inspect.trace(text)\n  })\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state(\"Hello world\")\n  $inspect(text)\n  $inspect(text).with((value) => console.log(\"Updated text:\", value))\n  $effect(() => {\n    $inspect.trace(text)\n  }, text)\n</script>\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:7:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"Hello world\"\n\n  $inspect(text)\n  $inspect(text).with(value => {\n    console.log(\"Custom callback: text changed to\", value)\n  })\n\n  $effect(() => {\n    text\n    $inspect.trace()\n  })\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"Hello world\"\n\n  $inspect(text)\n\n  $inspect(text).with(val => console.log('Text updated:', val))\n\n  $effect(() => {\n    $inspect(text).trace()\n  })\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script runes>\n  const text = $state(\"Hello world\");\n  $inspect(text);\n  $inspect(text).with(value => console.log(\"Updated text:\", value));\n  $effect(() => {\n    $inspect.trace();\n  }, text);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:7:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n$state text = \"Hello world\"\n$inspect(text)\n$inspect(text).with(value => console.log(\"Input updated:\", value))\n$effect(() => {\n  $inspect.trace(text)\n})\n</script>\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:7 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "props",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props {\n    name = \"World\";\n    count = 0;\n    showDetails = false;\n  }\n  $state currentCount = count;\n  function increment() {\n    currentCount += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props {\n    name = \"World\";\n    count = 0;\n    showDetails = false;\n  }\n  $state currentCount = count;\n  function increment() {\n    currentCount += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props({\n    name = \"World\",\n    count = 0,\n    showDetails = false\n  });\n\n  $state currentCount = count;\n</script>\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => currentCount++}>Increment</button>\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:9 Shorthand property assignments are valid only in destructuring patterns\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props name = \"World\", count = 0, showDetails = false\n  $state localCount = count\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {localCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => localCount++}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {localCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/props.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/props.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props({\n    name: \"World\",\n    count: 0,\n    showDetails: false\n  });\n  let currentCount = $state(count);\n  function increment() {\n    currentCount += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:2 `$props()` can only be used at the top level of components as a variable declaration initializer\nhttps://svelte.dev/e/props_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name, count: initialCount, showDetails } = $props({\n    name: 'World',\n    count: 0,\n    showDetails: false\n  });\n  const count = $state(initialCount);\n  function increment() {\n    count.set(count() + 1);\n  }\n</script>\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count()}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count()}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:53 `$props` cannot be called with arguments\nhttps://svelte.dev/e/rune_invalid_arguments"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script runes=\"$props, $state\">\n  $props name = \"World\";\n  $props count = 0;\n  $props showDetails = false;\n  $state currentCount = count;\n</script>\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => currentCount += 1}>Increment</button>\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props({\n    name: 'World',\n    count: 0,\n    showDetails: false\n  });\n  $state let currentCount = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => currentCount += 1}>\n    Increment\n  </button>\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails ? 'true' : 'false'}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:9:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props({\n    name: 'World',\n    count: 0,\n    showDetails: false\n  });\n  $state currentCount = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => currentCount++}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:9:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props let name = \"World\";\n  $props let count = 0;\n  $props let showDetails = false;\n  $state let countState = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {countState}</p>\n  <button data-testid=\"increment-button\" on:click={() => countState++}>Increment</button>\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {countState}</p>\n      <p>ShowDetails is {showDetails ? 'true' : 'false'}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "OpenAI",
    "modelId": "o4-mini-2025-04-16",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n{@snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  snippet title = (title) => <span data-testid=\"book-title\">{title}</span>;\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\nconst books = [\n  \"The Lord of the Rings\",\n  \"To Kill a Mockingbird\",\n  \"1984\"\n];\n\n@snippet title(book) {\n  <span data-testid=\"book-title\">{book}</span>\n}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title book}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:10:0 Unexpected character '@'\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ]\n\n  snippet title(bookTitle) {\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n $state books = [\n   \"The Lord of the Rings\",\n   \"To Kill a Mockingbird\",\n   \"1984\"\n ]\n</script>\n\n<snippet name=\"title\" let:title>\n  <span data-testid=\"book-title\">{title}</span>\n</snippet>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title book}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\nconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\nsnippet title(book) {\n  <span data-testid=\"book-title\">{book}</span>\n}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script runes>\n  $state books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"]\n  $snippet title(book) {\n    <span data-testid=\"book-title\">{book}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title book}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"]\n  snippet title(book) {\n    <span data-testid=\"book-title\">{book}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n# snippet title(book)\n<span data-testid=\"book-title\">{book}</span>\n# end snippet\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title book}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:13:41 `{@render ...}` tags can only contain call expressions\nhttps://svelte.dev/e/render_tag_invalid_expression"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"]\n\n  snippet title(book) {\n    <span data-testid=\"book-title\">{book}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "counter",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 2,
    "pass1": 0.20000000000000007,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state count = 0;\n\tfunction increment() {\n\t\t$state.count += 1;\n\t}\n\tfunction decrement() {\n\t\t$state.count -= 1;\n\t}\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{$state.count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count = count + 1;\n  }\n\n  function decrement() {\n    count = count - 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button on:click={decrement} data-testid=\"decrement-button\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button on:click={increment} data-testid=\"increment-button\">+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\t\n\tfunction increment() {\n\t\tcount += 1;\n\t}\n\t\n\tfunction decrement() {\n\t\tcount -= 1;\n\t}\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 10px;\n\t}\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state = {\n\t\tcount: 0\n\t};\n\n\tfunction increment() {\n\t\t$state.count += 1;\n\t}\n\n\tfunction decrement() {\n\t\t$state.count -= 1;\n\t}\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{$state.count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\tconst increment = () => count += 1;\n\tconst decrement = () => count -= 1;\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\t}\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state count = 0\n\n\tfunction increment() {\n\t\tcount += 1\n\t}\n\n\tfunction decrement() {\n\t\tcount -= 1\n\t}\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 10px;\n\t}\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state count = 0;\n\n\tfunction increment() {\n\t\tcount++;\n\t}\n\n\tfunction decrement() {\n\t\tcount--;\n\t}\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 10px;\n\t\tfont-size: 1.5rem;\n\t}\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:7 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const state = $state({ count: 0 });\n\n  function increment() {\n    state.count++;\n  }\n\n  function decrement() {\n    state.count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n  }\n  \n  .counter button {\n    margin: 0 10px;\n    padding: 5px 10px;\n    font-size: 16px;\n  }\n  \n  .counter span {\n    font-size: 18px;\n    min-width: 30px;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state count = 0;\n\tconst increment = () => count++;\n\tconst decrement = () => count--;\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n</style>",
        "success": false,
        "errors": [
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state.count ??= 0;\n\t\n\tfunction increment() {\n\t\t$state.count += 1;\n\t}\n\t\n\tfunction decrement() {\n\t\t$state.count -= 1;\n\t}\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{$state.count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t}\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:1 `$state.count` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(() => number * 2);\n\n  function increment() {\n    number = number + 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"number-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $derived(number, n => n * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.set(number + 1)}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "rune_outside_svelte\nThe `$derived` rune is only available inside `.svelte` and `.svelte.js/ts` files\nhttps://svelte.dev/e/rune_outside_svelte",
          "rune_outside_svelte\nThe `$derived` rune is only available inside `.svelte` and `.svelte.js/ts` files\nhttps://svelte.dev/e/rune_outside_svelte"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $derived(number, n => n * 2);\n\n  function increment() {\n    number.update(n => n + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst number = $state(5)\n\tconst doubled = $derived(number, n => n * 2)\n\t\n\tfunction increment() {\n\t\tnumber.update(n => n + 1)\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"number-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst count = $state(5);\n\tconst doubled = $derived(count, n => n * 2);\n\tconst increment = () => count.set(count.get() + 1);\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {count}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:17 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $derived(number, value => value * 2);\n  \n  function increment() {\n    number.set(n => n + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:18 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $derived(() => $number * 2, [number]);\n  \n  function increment() {\n    number.set($number + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:18 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $derived(() => number * 2);\n\n  function increment() {\n    number = number + 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:8:4 Cannot assign to constant\nhttps://svelte.dev/e/constant_assignment"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $derived(() => number() * 2);\n  const increment = () => number.set(number() + 1);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number()}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled()}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst number = $state(5);\n\tconst doubled = $derived(() => number * 2);\n\n\tfunction increment() {\n\t\tnumber = number + 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:8:2 Cannot assign to constant\nhttps://svelte.dev/e/constant_assignment"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"\";\n  $derived.by(text, t => t.trim().split(/\\s+/).filter(Boolean).length) as wordCount;\n  $derived.by(text, t => t.length) as charCount;\n  $derived.by(wordCount, wc => wc > 15) as isLong;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = \"\"}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state(\"\");\n  const { wordCount, charCount, isLong } = $derived.by(t => {\n    const words = t.trim().split(/\\s+/).filter(Boolean);\n    return {\n      wordCount: words.length,\n      charCount: t.length,\n      isLong: words.length > 15\n    };\n  }, text);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text.set(\"\")}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? \"Long text\" : \"Short text\"}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"word-count\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-1t898pb\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-1t898pb\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-1t898pb\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state text = \"\";\n\n\t$derived.by wordCount = (text) => text.trim().split(/\\s+/).filter(Boolean).length, [text];\n\t$derived.by charCount = (text) => text.length, [text];\n\t$derived.by isLong = (wordCount) => wordCount > 15 ? \"Long text\" : \"Short text\", [wordCount];\n\n\tfunction clearText() {\n\t\ttext = \"\";\n\t}\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {isLong}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state(\"\");\n\n  const { wordCount, charCount, isLong } = $derived.by(() => {\n    const trimmed = text.trim();\n    const words = trimmed ? trimmed.split(/\\s+/) : [];\n    return {\n      wordCount: words.length,\n      charCount: text.length,\n      isLong: words.length > 15\n    };\n  });\n\n  const clearText = () => {\n    text.set(\"\");\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLong ? \"Long text\" : \"Short text\"}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state text = \"\";\n  $derived.by(() => {\n    const trimmed = text.trim();\n    const wordsArray = trimmed ? trimmed.split(/\\s+/) : [];\n    const wordCount = wordsArray.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n  \n  function clearText() {\n    text = \"\";\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by.value.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by.value.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$derived.by.value.isLong ? \"Long text\" : \"Short text\"}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state text = \"\";\n\n\t$derived.by(\n\t\t() => {\n\t\t\tconst trimmed = text.trim();\n\t\t\tconst words = trimmed ? trimmed.split(/\\s+/).length : 0;\n\t\t\tconst chars = text.length;\n\t\t\tconst isLong = words > 15;\n\t\t\treturn { words, chars, isLong };\n\t\t},\n\t\t[text],\n\t\t\"derivedValues\"\n\t);\n\n\tconst clearText = () => {\n\t\ttext = \"\";\n\t};\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {$derivedValues.words}</p>\n\t\t<p data-testid=\"char-count\">Characters: {$derivedValues.chars}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {$derivedValues.isLong ? \"Long text\" : \"Short text\"}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state text = \"\";\n\t$derived.by {\n\t\twordCount: text.split(/\\s+/).filter(word => word).length,\n\t\tcharCount: text.length,\n\t\tisLong: text.split(/\\s+/).filter(word => word).length > 15\n\t}\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<button data-testid=\"clear-button\" on:click={() => text = \"\"}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {isLong ? \"Long text\" : \"Short text\"}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst text = $state(\"\");\n\tconst wordCount = $derived.by(() => {\n\t\tconst trimmed = text.value.trim();\n\t\treturn trimmed ? trimmed.split(/\\s+/).length : 0;\n\t}, text);\n\tconst charCount = $derived.by(() => text.value.length, text);\n\tconst isLong = $derived.by(() => wordCount.value > 15 ? \"Long text\" : \"Short text\", wordCount);\n\n\tfunction clearText() {\n\t\ttext.value = \"\";\n\t}\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text.value} />\n\t<button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount.value}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount.value}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {isLong.value}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"\");\n\tconst stats = $derived.by(text, (value) => {\n\t\tconst trimmed = value.trim();\n\t\tconst wordCount = trimmed === \"\" ? 0 : trimmed.split(/\\s+/).length;\n\t\tconst charCount = value.length;\n\t\tconst isLong = wordCount > 15;\n\t\treturn { wordCount, charCount, isLong };\n\t});\n\tconst clearText = () => {\n\t\ttext = \"\";\n\t};\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {stats.isLong ? \"Long text\" : \"Short text\"}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\nconst text = $state(\"\");\n\nconst { wordCount, charCount, longText } = $derived.by(text, (value) => {\n  const words = value.trim() ? value.trim().split(/\\s+/) : [];\n  return {\n    wordCount: words.length,\n    charCount: value.length,\n    longText: words.length > 15\n  };\n});\n\nfunction clear() {\n  text.set(\"\");\n}\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <button data-testid=\"clear-button\" on:click={clear}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$longText ? \"Long text\" : \"Short text\"}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "each",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = ['Jerry', 'Elaine', 'Kramer'];\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, 'George'];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"]\n  const addGeorge = () => {\n    characters = [...characters, \"George\"]\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:7 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n\tfunction addGeorge() {\n\t\tcharacters.mutate((list) => [...list, \"George\"]);\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Cannot convert object to primitive value"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  \n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\t\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $state(10);\n  \n  $effect(() => {\n    doubled.set(number() * 2);\n  });\n  \n  function increment() {\n    number.set(number() + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number()}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled()}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst number = $state(5)\n\tlet doubled\n\t$effect(() => {\n\t\tdoubled = number * 2\n\t})\n\t\n\tfunction increment() {\n\t\tnumber.set(number + 1)\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Cannot convert object to primitive value"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state number = 5\n\tlet doubled\n\t\n\t$effect {\n\t\tdoubled = number * 2\n\t}\n\t\n\tfunction increment() {\n\t\tnumber += 1\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state number = 5;\n\t$state doubled = number * 2;\n\t\n\t$effect {\n\t\tdoubled = number * 2;\n\t}\n\t\n\tfunction increment() {\n\t\tnumber = number + 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled;\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\n\tfunction increment() {\n\t\tnumber = number + 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state number = 5;\n\tlet doubled;\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\tfunction increment() {\n\t\tnumber = number + 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state: number = 5;\n\t$state: doubled = number * 2;\n\n\t$effect: {\n\t\tdoubled = number * 2;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "number is not defined",
          "number is not defined"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state let number = 5;\n\tlet doubled;\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\tfunction increment() {\n\t\tnumber += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state number = 5;\n\tlet doubled;\n\t$effect: doubled = number * 2;\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5;\n  $state doubled = 0;\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 6,
    "pass1": 0.5999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script logic required for this simple component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 8px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\texport let name = \"World\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, {name}!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 10px;\n\t}\n\tbody {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\theight: 100vh;\n\t\tmargin: 0;\n\t}\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:1 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script is needed for this component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = 'Hello, World!';\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">{name}</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "Cannot create property 'value' on number '0'\n\n\tin $effect\n\tin Component.svelte\n",
          "Cannot create property 'value' on number '0'\n\n\tin $effect\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, {name}!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: \u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: \u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: \u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: \u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // no script necessary\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, {name}!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n\n  :global(body) {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script logic required for this component\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n  \n  :global(body) {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    margin: 0;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 0.5rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state(\"Hello world\");\n\n  $inspect(text);\n  $inspect(text).with((value) => {\n    console.log(\"Custom callback:\", value);\n  });\n\n  $effect(() => {\n    $inspect.trace();\n    // Effect runs when text changes\n    console.log(\"Text changed to:\", text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:19:46 Cannot bind to constant\nhttps://svelte.dev/e/constant_binding"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state text = \"Hello world\"\n\n\t$inspect(text)\n\t$inspect(text).with(value => {\n\t\tconsole.log(\"Custom tracked update:\", value)\n\t})\n\n\t$effect(() => {\n\t\t$inspect.trace()\n\t\tconsole.log(\"Effect triggered. Current value:\", text)\n\t})\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state text = \"Hello world\";\n\n\t$inspect(text);\n\t$inspect(text).with((value) => {\n\t\tconsole.log(\"Updated text:\", value);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace(text);\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state text = \"Hello world\";\n\n\t$inspect(text);\n\t$inspect(text).with((value) => {\n\t\tconsole.log(\"Custom update:\", value);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace();\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t$inspect(text);\n\t$inspect(text).with((newValue, oldValue) => {\n\t\tconsole.log(\"Custom update:\", oldValue, \"->\", newValue);\n\t});\n\n\t$: {\n\t\t$text; // dependency on text\n\t\t$inspect.trace();\n\t}\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:11:1 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst text = $state(\"Hello world\");\n\n\t$inspect(text);\n\ttext.with((value) => {\n\t\tconsole.log(\"Custom update detected:\", value);\n\t});\n\n\t$effect(() => {\n\t\ttext;\n\t\t$inspect.trace();\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:13:2 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t$inspect(text);\n\n\t$inspect(text).with((newValue) => {\n\t\tconsole.log(\"Input updated:\", newValue);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace(\"Trace effect:\", text);\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:13:2 `$inspect.trace` must be called with zero or one arguments\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t$inspect(text);\n\t$inspect(text).with(value => console.log(\"Custom update callback:\", value));\n\n\t$effect(() => {\n\t\t$inspect.trace(text);\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Hello world\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Hello world\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Testing $inspect\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Testing $inspect\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"!@#$%^&*()\"\u001b[39m\nReceived:\n\u001b[31m  Current text: !@#$%^&*()\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"\"\u001b[39m\nReceived:\n\u001b[31m  Current text:\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state(\"Hello world\");\n\n  $inspect(text);\n  $inspect(text).with((newVal, oldVal) => {\n    console.log(\"Text updated from:\", oldVal, \"to:\", newVal);\n  });\n\n  $effect(() => {\n    $inspect.trace(\"Text changed\", text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:12:4 `$inspect.trace` must be called with zero or one arguments\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t$inspect(text);\n\t$inspect(text).with((value) => {\n\t\tconsole.log(\"Custom update callback:\", value);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace();\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Hello world\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Hello world\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Testing $inspect\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Testing $inspect\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"!@#$%^&*()\"\u001b[39m\nReceived:\n\u001b[31m  Current text: !@#$%^&*()\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"\"\u001b[39m\nReceived:\n\u001b[31m  Current text:\u001b[39m"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "props",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$props: {\n\t\tname: \"World\",\n\t\tcount: 0,\n\t\tshowDetails: false\n\t};\n\n\t$state currentCount = $props.count;\n\n\tconst increment = () => {\n\t\tcurrentCount = currentCount + 1;\n\t};\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\t{#if $props.showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {$props.name}</p>\n\t\t\t<p>Count is {currentCount}</p>\n\t\t\t<p>ShowDetails is {$props.showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:7 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$props({\n\t\tname: \"World\",\n\t\tcount: 0,\n\t\tshowDetails: false\n\t});\n\n\tlet count = $state($props.count);\n\n\tfunction increment() {\n\t\tcount++;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n\t<p data-testid=\"count-display\">Count: {count}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\t{#if $props.showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {$props.name}</p>\n\t\t\t<p>Count is {count}</p>\n\t\t\t<p>ShowDetails is {$props.showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:1 `$props()` can only be used at the top level of components as a variable declaration initializer\nhttps://svelte.dev/e/props_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = \"World\", count = 0, showDetails = false } = $props;\n  let reactiveCount = $state(count);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {reactiveCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => reactiveCount = reactiveCount + 1}>\n    Increment\n  </button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {reactiveCount}</p>\n      <p>ShowDetails is true</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:59 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$props({\n\t\tname: \"World\",\n\t\tcount: 0,\n\t\tshowDetails: false\n\t});\n\n\tlet { name, showDetails } = $props;\n\n\tconst state = $state({ count: $props.count });\n\n\tfunction increment() {\n\t\tstate.count++;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {state.count}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {state.count}</p>\n\t\t\t<p>ShowDetails is {showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:1 `$props()` can only be used at the top level of components as a variable declaration initializer\nhttps://svelte.dev/e/props_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet { name = \"World\", count = 0, showDetails = false } = $props;\n\t$state currentCount = count;\n\tfunction increment() {\n\t\tcurrentCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {currentCount}</p>\n\t\t\t<p>ShowDetails is {showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/props.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/props.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$props({\n\t\tname: \"World\",\n\t\tcount: 0,\n\t\tshowDetails: false\n\t});\n\tlet $state = {\n\t\tcount: $props.count\n\t};\n\t\n\tfunction increment() {\n\t\t$state.count += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n\t<p data-testid=\"count-display\">Count: {$state.count}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\t{#if $props.showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {$props.name}</p>\n\t\t\t<p>Count is {$state.count}</p>\n\t\t\t<p>ShowDetails is {$props.showDetails.toString()}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:9:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$props = {\n\t\tname: $props.name ?? \"World\",\n\t\tcount: $props.count ?? 0,\n\t\tshowDetails: $props.showDetails ?? false\n\t};\n\n\t$state = {\n\t\tcount: $props.count\n\t};\n\n\tfunction increment() {\n\t\t$state.count += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n\t<p data-testid=\"count-display\">Count: {$state.count}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\t{#if $props.showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {$props.name}</p>\n\t\t\t<p>Count is {$state.count}</p>\n\t\t\t<p>ShowDetails is {$props.showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:1 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props = {\n    name: \"World\",\n    count: 0,\n    showDetails: false\n  };\n\n  let $state = {\n    count: $props.count\n  };\n\n  function increment() {\n    $state.count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "Failed to resolve import \"./Component.svelte\" from \"tmp/openai/props.test.ts\". Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst { name = \"World\", count = 0, showDetails = false } = $props;\n\tlet currentCount = $state(count);\n\t\n\tfunction increment() {\n\t\tcurrentCount = currentCount + 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {currentCount}</p>\n\t\t\t<p>ShowDetails is {showDetails.toString()}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:60 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$props: {\n\t\tname = \"World\",\n\t\tcount = 0,\n\t\tshowDetails = false\n\t}\n\n\t$state: currentCount = count\n\n\tfunction increment() {\n\t\tcurrentCount += 1\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {currentCount}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "count is not defined",
          "count is not defined",
          "count is not defined",
          "count is not defined"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "OpenAI",
    "modelId": "o3-mini-2025-01-31",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"]\n\n  snippet title = (bookTitle: string) => {\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:10 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n\tsnippet title = (bookTitle) => {\n\t\treturn <span data-testid=\"book-title\">{bookTitle}</span>;\n\t};\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"]\n\n\tsnippet title = (bookTitle: string) => {\n\t\t<span data-testid=\"book-title\">{bookTitle}</span>\n\t}\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n{@snippet title(bookTitle) =>\n\t<span data-testid=\"book-title\">{bookTitle}</span>\n}\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "bookTitle is not defined",
          "bookTitle is not defined",
          "bookTitle is not defined"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet name=\"title\" let:title>\n\t<span data-testid=\"book-title\">{title}</span>\n</snippet>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title book}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:14:12 `{@render ...}` tags can only contain call expressions\nhttps://svelte.dev/e/render_tag_invalid_expression"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet title let:title>\n\t<span data-testid=\"book-title\">{title}</span>\n</snippet>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title, book}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:14:12 `{@render ...}` tags can only contain call expressions\nhttps://svelte.dev/e/render_tag_invalid_expression"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet name=\"title\" let:book>\n\t<span data-testid=\"book-title\">{book}</span>\n</snippet>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title book}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:14:12 `{@render ...}` tags can only contain call expressions\nhttps://svelte.dev/e/render_tag_invalid_expression"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet title(book: string)>\n\t<span data-testid=\"book-title\">{book}</span>\n</snippet>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:7:9 'title(book:' is not a valid attribute name\nhttps://svelte.dev/e/attribute_invalid_name"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet books = [\n\t\t\"The Lord of the Rings\",\n\t\t\"To Kill a Mockingbird\",\n\t\t\"1984\"\n\t];\n</script>\n\n<snippet title let:book>\n\t<span data-testid=\"book-title\">{book}</span>\n</snippet>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n\tsnippet title(book) {\n\t\t<span data-testid=\"book-title\">{book}</span>\n\t}\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title, book}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "counter",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0;\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0;\n\n  function increment() {\n    $state.count += 1;\n  }\n\n  function decrement() {\n    $state.count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state.count = 0;\n\n\tfunction increment() {\n\t\t$state.count += 1;\n\t}\n\n\tfunction decrement() {\n\t\t$state.count -= 1;\n\t}\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{$state.count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 10px;\n\t}\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:1 `$state.count` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = { count: 0 };\n\n  function increment() {\n    $state.count += 1;\n  }\n\n  function decrement() {\n    $state.count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $: count = 0;\n\n  function increment() {\n    $state.count++;\n  }\n\n  function decrement() {\n    $state.count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0;\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { count: 0 };\n\n\tfunction increment() {\n\t\t$state.count += 1;\n\t}\n\n\tfunction decrement() {\n\t\t$state.count -= 1;\n\t}\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n\t<span data-testid=\"count-value\">{$state.count}</span>\n\t<button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 10px;\n\t}\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:1 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 0;\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{$count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $state = {\n    count: 0\n  };\n\n  function increment() {\n    $state.count += 1;\n  }\n\n  function decrement() {\n    $state.count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n  }\n\n  button {\n    margin: 0 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state = {\n    count: 0\n  };\n\n  function increment() {\n    $state.count += 1;\n  }\n\n  function decrement() {\n    $state.count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n  }\n\n  button {\n    margin: 0 10px;\n  }\n\n  span {\n    font-size: 1.5em;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { number: 5 };\n\n\tlet $derived = {\n\t\tdoubled: () => $state.number * 2\n\t};\n\n\tfunction increment() {\n\t\t$state.number += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {$state.number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {$derived.doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { number: 5 };\n\tlet $derived = { doubled: $state => $state.number * 2 };\n\n\tfunction increment() {\n\t\t$state.number += 1;\n\t}\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived.doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $derived(() => number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = {\n\t\tnumber: 5\n\t};\n\n\tlet $derived = {\n\t\tdoubled: () => $state.number * 2\n\t};\n\n\tfunction increment() {\n\t\t$state.number += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {$state.number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {$derived.doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { number: 5 };\n\tlet $derived = { doubled: $ => $.number * 2 };\n\n\tfunction increment() {\n\t\t$state.number += 1;\n\t}\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived.doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { number: 5 };\n\n\tlet $derived = {\n\t\tdoubled: () => $state.number * 2\n\t};\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {$state.number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {$derived.doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={() => $state.number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $derived(() => number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled: () => get(number) * 2\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled: () => get(number) * 2\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $derived(() => number() * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number()}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled()}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.set(number() + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $derived(() => number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled: () => get(number) * 2\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled: () => get(number) * 2\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $derived(() => number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled: () => get(number) * 2\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled: () => get(number) * 2\u001b[39m"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 1,
    "pass1": 0.09999999999999998,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\n\tlet { wordCount, charCount, isLong } = $derived.by(() => {\n\t\tconst words = text.trim().split(/\\s+/).filter(Boolean);\n\t\tconst wordCount = words.length;\n\t\tconst charCount = text.length;\n\t\tconst isLong = wordCount > 15;\n\t\treturn { wordCount, charCount, isLong };\n\t});\n\n\tfunction clearText() {\n\t\ttext = '';\n\t}\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state('');\n  const derived = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(Boolean);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n  \n  function clearText() {\n    text.set('');\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {derived.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {derived.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$derived.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\n\tlet wordCount = $derived.by(() => text.trim().split(/\\s+/).filter(Boolean).length);\n\tlet charCount = $derived.by(() => text.length);\n\tlet isLongText = $derived.by(() => wordCount > 15);\n\n\tfunction clearText() {\n\t\ttext = '';\n\t}\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLongText ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = {\n\t\ttext: ''\n\t};\n\n\tlet $derived = {\n\t\twords: $derived.by(() => $state.text.trim().split(/\\s+/).filter(word => word).length),\n\t\tchars: $derived.by(() => $state.text.length),\n\t\tisLong: $derived.by(() => $derived.words > 15)\n\t};\n</script>\n\n<div>\n\t<input \n\t\tdata-testid=\"text-input\" \n\t\ttype=\"text\" \n\t\tbind:value={$state.text} \n\t/>\n\t<button \n\t\tdata-testid=\"clear-button\" \n\t\ton:click={() => $state.text = ''}\n\t>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {$derived.words}</p>\n\t\t<p data-testid=\"char-count\">Characters: {$derived.chars}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {$derived.isLong ? 'Long text' : 'Short text'}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"\");\n\n\tlet { wordCount, charCount, isLong } = $derived.by(() => {\n\t\tconst words = text.trim().split(/\\s+/).filter(Boolean);\n\t\tconst wordCount = words.length;\n\t\tconst charCount = text.length;\n\t\tconst isLong = wordCount > 15;\n\t\treturn { wordCount, charCount, isLong };\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<button data-testid=\"clear-button\" on:click={() => text = \"\"}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {isLong ? \"Long text\" : \"Short text\"}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = {\n\t\ttext: ''\n\t};\n\n\tlet $derived = {\n\t\tby: {\n\t\t\twordCount: () => $state.text.trim() === '' ? 0 : $state.text.trim().split(/\\s+/).length,\n\t\t\tcharCount: () => $state.text.length,\n\t\t\tisLong: () => $state.text.trim().split(/\\s+/).length > 15\n\t\t}\n\t};\n\n\tfunction clearText() {\n\t\t$state.text = '';\n\t}\n</script>\n\n<div>\n\t<input \n\t\tdata-testid=\"text-input\" \n\t\ttype=\"text\" \n\t\tbind:value={$state.text}\n\t/>\n\t<button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {$derived.by.wordCount()}</p>\n\t\t<p data-testid=\"char-count\">Characters: {$derived.by.charCount()}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {$derived.by.isLong() ? 'Long text' : 'Short text'}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state('');\n  \n  const { words, chars, isLong } = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(Boolean).length;\n    const chars = text.length;\n    const isLong = words > 15;\n    return { words, chars, isLong };\n  });\n\n  function clearText() {\n    text.set('');\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$words}</p>\n    <p data-testid=\"char-count\">Characters: {$chars}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "store_invalid_shape\n`words` is not a store with a `subscribe` method\nhttps://svelte.dev/e/store_invalid_shape\n\n\tin {expression}\n\tin Component.svelte\n",
          "store_invalid_shape\n`words` is not a store with a `subscribe` method\nhttps://svelte.dev/e/store_invalid_shape\n\n\tin {expression}\n\tin Component.svelte\n",
          "store_invalid_shape\n`words` is not a store with a `subscribe` method\nhttps://svelte.dev/e/store_invalid_shape\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n  \n  const { words, chars, isLong } = $derived.by(() => {\n    const words = text.trim() ? text.trim().split(/\\s+/).length : 0;\n    const chars = text.length;\n    const isLong = words > 15;\n    return { words, chars, isLong };\n  });\n  \n  const clearText = () => {\n    text = '';\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$words}</p>\n    <p data-testid=\"char-count\">Characters: {$chars}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "store_invalid_shape\n`words` is not a store with a `subscribe` method\nhttps://svelte.dev/e/store_invalid_shape\n\n\tin {expression}\n\tin Component.svelte\n",
          "store_invalid_shape\n`words` is not a store with a `subscribe` method\nhttps://svelte.dev/e/store_invalid_shape\n\n\tin {expression}\n\tin Component.svelte\n",
          "store_invalid_shape\n`words` is not a store with a `subscribe` method\nhttps://svelte.dev/e/store_invalid_shape\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const text = $state('');\n  \n  const wordCount = $derived.by(() => text().split(/\\s+/).filter(Boolean).length);\n  const charCount = $derived.by(() => text().length);\n  const isLongText = $derived.by(() => wordCount() > 15);\n  \n  function clearText() {\n    text('');\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" value={text()} on:input={(e) => text(e.target.value)} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount()}</p>\n    <p data-testid=\"char-count\">Characters: {charCount()}</p>\n    <p data-testid=\"length-indicator\">Status: {isLongText() ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\tlet wordCount, charCount, isLongText;\n\n\t$derived.by(() => {\n\t\tconst words = text.trim().split(/\\s+/).filter(Boolean);\n\t\twordCount = words.length;\n\t\tcharCount = text.length;\n\t\tisLongText = wordCount > 15;\n\t});\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <button data-testid=\"clear-button\" on:click={() => $text.set('')}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLongText ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:18 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "each",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n\t$: addGeorge = () => {\n\t\tcharacters = [...characters, \"George\"];\n\t};\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:1 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  $: addCharacter = () => {\n    characters = [...characters, \"George\"];\n  };\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addCharacter}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\t\n\tconst addGeorge = () => {\n\t\tcharacters = [...characters, \"George\"];\n\t};\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n\tfunction addGeorge() {\n\t\tcharacters = [...characters, \"George\"];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 5,
    "pass1": 0.5,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst number = $state(5);\n\tconst doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled.set(number() * 2);\n\t});\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number()}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled()}</p>\n\t<button data-testid=\"increment-button\" on:click={() => number.update(n => n + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst number = $state(5);\n\tconst doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled.set(number() * 2);\n\t});\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number()}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled()}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.set(number() + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n",
          "(0 , reaction.fn) is not a function\n\n\tin {expression}\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst number = $state(5);\n\tconst doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled.set(number.$ * 2);\n\t});\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number.$}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled.$}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.set(number.$ + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "doubled.set is not a function\n\n\tin $effect\n\tin Component.svelte\n",
          "doubled.set is not a function\n\n\tin $effect\n\tin Component.svelte\n"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { number: 5 };\n\tlet doubled;\n\n\t$effect(() => {\n\t\tdoubled = $state.number * 2;\n\t});\n\n\tfunction increment() {\n\t\t$state.number += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {$state.number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled;\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let number = $state(5);\n    let doubled = $state(0);\n\n    $effect(() => {\n        doubled = number * 2;\n    });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 7,
    "pass1": 0.7,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script logic needed for this component\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:16 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t// No script necessary for this simple component\n</script>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 10px;\n\t}\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No extra script needed\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n\n  :global(body) {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Svelte 5 built-in states and effects can be used here if needed\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1em;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/hello-world.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/hello-world.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script logic needed for this component\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Script content if needed\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t// No JavaScript needed for this component\n</script>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 10px;\n\t}\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Svelte 5 component logic (if any) goes here\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Svelte 5 does not require explicit script tag if it contains no code\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('Hello world');\n\n\t$inspect(text);\n\n\t$inspect(text).with(value => {\n\t\tconsole.log('Input updated to:', value);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace(text);\n\t});\n\n\t$: charCount = text.length;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:16:1 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('Hello world');\n\n\t$inspect(text);\n\n\t$inspect(text).with((newValue, oldValue) => {\n\t\tconsole.log('Text updated from', oldValue, 'to', newValue);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace();\n\t}, text);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:12:1 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { text: \"Hello world\" };\n\t\n\t$inspect($state.text);\n\t$inspect($state.text).with(value => console.log('Text updated:', value));\n\n\t$effect(() => {\n\t\t$inspect.trace();\n\t}, $state.text);\n\n\t$: charCount = $state.text.length;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$state.text} />\n  <p data-testid=\"text-value\">Current text: {$state.text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/inspect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/inspect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t$inspect(text);\n\n\t$inspect(text).with(value => {\n\t\tconsole.log(\"Input updated:\", value);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace(text);\n\t});\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /tmp/openai/Component.svelte (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/Component.svelte) in /Users/k/Documents/GitHub/svelte-bench/tmp/openai/inspect.test.ts. Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { text: 'Hello world' };\n\tconst { text } = $state;\n\n\t$inspect(text);\n\n\t$inspect(text).with(value => {\n\t\tconsole.log('Text updated:', value);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace(text);\n\t}, text);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$state.text} />\n  <p data-testid=\"text-value\">Current text: {$state.text}</p>\n  <p data-testid=\"char-count\">Character count: {$state.text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    text: \"Hello world\"\n  };\n\n  $inspect($state.text);\n  \n  $inspect($state.text).with((value) => {\n    console.log(\"Text updated to:\", value);\n  });\n  \n  $effect(() => {\n    console.log(\"Effect triggered\");\n    $inspect.trace($state.text);\n  });\n\n  $: charCount = $state.text.length;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$state.text} />\n  <p data-testid=\"text-value\">Current text: {$state.text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('Hello world');\n\n\t$inspect(text);\n\t$inspect(text).with(value => console.log('Updated value:', value));\n\n\t$effect(() => {\n\t\t$inspect.trace();\n\t});\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Hello world\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Hello world\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Testing $inspect\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Testing $inspect\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"!@#$%^&*()\"\u001b[39m\nReceived:\n\u001b[31m  Current text: !@#$%^&*()\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"\"\u001b[39m\nReceived:\n\u001b[31m  Current text:\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t$inspect(text);\n\t$inspect(text).with((value) => console.log('Updated text:', value));\n\n\t$effect(() => {\n\t\t$inspect.trace('Effect triggered by text change');\n\t\tconsole.log('Input value changed to:', text);\n\t}, [text]);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:9:1 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet $state = { text: \"Hello world\" };\n\n\t$inspect($state.text).with(value => {\n\t\tconsole.log(\"Input updated:\", value);\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace();\n\t}, $state.text);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$state.text} />\n  <p data-testid=\"text-value\">Current text: {$state.text}</p>\n  <p data-testid=\"char-count\">Character count: {$state.text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:5 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  $inspect(text);\n\n  $inspect(text).with(value => {\n    console.log(\"Text updated to:\", value);\n  });\n\n  $effect(() => {\n    $inspect.trace(\"text changed\");\n  }, text);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:12:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "props",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props;\n  const $count = $state(count);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {$count}</p>\n  <button data-testid=\"increment-button\" on:click={() => $count++}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {$count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props;\n  const $count = $state(count);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$name}!</h1>\n  <p data-testid=\"count-display\">Count: {$count}</p>\n  <button data-testid=\"increment-button\" on:click={() => $count++}>Increment</button>\n\n  {#if $showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$name}</p>\n      <p>Count is {$count}</p>\n      <p>ShowDetails is {$showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = 'World', count = 0, showDetails = false } = $props;\n  let $state = { count };\n\n  function increment() {\n    $state.count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n  \n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props;\n  const $count = $state(count);\n\n  function increment() {\n    $count.update(n => n + 1);\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {$count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {$count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst { name = \"World\", count = 0, showDetails = false } = $props;\n\tconst $count = $state(count);\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {$count}</p>\n\t<button data-testid=\"increment-button\" on:click={() => $count++}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {$count}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/props.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/props.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = 'World', count = 0, showDetails = false } = $props;\n  const $state = { currentCount: count };\n\n  function increment() {\n    $state.currentCount += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {$state.currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst { name = \"World\", count = 0, showDetails = false } = $props;\n\tlet currentCount = count;\n\n\tfunction increment() {\n\t\tcurrentCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {currentCount}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:60 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst { name = \"World\", count = 0, showDetails = false } = $props;\n\tlet currentCount = count;\n\n\tfunction increment() {\n\t\tcurrentCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {currentCount}</p>\n\t\t\t<p>ShowDetails is {showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/props.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/props.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst { name = \"World\", count = 0, showDetails = false } = $props;\n\tlet $state = { count };\n\n\tfunction increment() {\n\t\t$state.count += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {$state.count}</p>\n\t<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {$state.count}</p>\n\t\t\t<p>ShowDetails is {showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:19 `$derived.by` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count: initialCount = 0, showDetails = false } = $props;\n  const count = $state(initialCount);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={() => count.set(count + 1)}>\n    Increment\n  </button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:75 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "OpenAI",
    "modelId": "gpt-4o-2024-08-06",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet title>\n  <span data-testid=\"book-title\">{title}</span>\n</snippet>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "title is not defined",
          "title is not defined",
          "title is not defined"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n{:snippet title}\n  <span data-testid=\"book-title\">{title}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title(book)}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:7:1 {:...} block is invalid at this position (did you forget to close the preceding element or block?)\nhttps://svelte.dev/e/block_invalid_continuation_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet title={bookTitle}>\n  <span data-testid=\"book-title\">{bookTitle}</span>\n</snippet>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:15 `$derived.by` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  $snippet title = (book) => {\n    return <span data-testid=\"book-title\">${book}</span>;\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:6:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet title={title} let:title>\n  <span data-testid=\"book-title\">{title}</span>\n</snippet>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title book}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:13:41 `{@render ...}` tags can only contain call expressions\nhttps://svelte.dev/e/render_tag_invalid_expression"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  $snippet title = (bookTitle) => <span data-testid=\"book-title\">${bookTitle}</span>;\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title(book)}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/openai/snippets.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/openai/snippets.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  $snippet title = (book) => {\n    return <span data-testid=\"book-title\">{book}</span>;\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title(book)}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet title>\n\t<span data-testid=\"book-title\">{title}</span>\n</snippet>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "title is not defined",
          "title is not defined",
          "title is not defined"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  $snippet title(book) {\n    <span data-testid=\"book-title\">{book}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"book-item\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"book-title\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"book-item\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  $snippet title = (book) => $fragment<span data-testid=\"book-title\">${book}</span>;\n</script>\n\n<ul>\n  {@render books.map(book => $fragment\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  )}\n</ul>",
        "success": false,
        "errors": [
          "tmp/openai/Component.svelte:5:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "counter",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 7,
    "pass1": 0.7,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n  \n  function increment() {\n    count++;\n  }\n  \n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  \n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.2rem;\n    cursor: pointer;\n  }\n  \n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  \n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.25rem;\n    cursor: pointer;\n  }\n  \n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n  \n  function increment() {\n    count++;\n  }\n  \n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  \n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.2rem;\n    cursor: pointer;\n  }\n  \n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n\n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.25rem;\n    cursor: pointer;\n  }\n\n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n  \n  function increment() {\n    count++;\n  }\n  \n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  \n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.25rem;\n    cursor: pointer;\n  }\n  \n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n  \n  function increment() {\n    count++;\n  }\n  \n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  \n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.2rem;\n    cursor: pointer;\n  }\n  \n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n  \n  function increment() {\n    count++;\n  }\n  \n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  \n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.25rem;\n    cursor: pointer;\n  }\n  \n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n  \n  function increment() {\n    count++;\n  }\n  \n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  \n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.25rem;\n    cursor: pointer;\n  }\n  \n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n  \n  function increment() {\n    count++;\n  }\n  \n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  \n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.2rem;\n    cursor: pointer;\n  }\n  \n  span {\n    font-size: 1.5rem;\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"count-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"count-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"decrement-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"decrement-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    font-size: 1.5rem;\n  }\n\n  button {\n    padding: 0.5rem 1rem;\n    font-size: 1.5rem;\n    cursor: pointer;\n    background-color: #f1f1f1;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n\n  span {\n    min-width: 2rem;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 9,
    "pass1": 0.9,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"number-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 7,
    "pass1": 0.7,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n  \n  let textStats = $derived.by(() => {\n    const wordCount = text.trim() ? text.trim().split(/\\s+/).length : 0;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    \n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n  \n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textStats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textStats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textStats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"\");\n\n  let textStats = $derived.by(() => {\n    const words = text.trim() === \"\" ? 0 : text.trim().split(/\\s+/).length;\n    const chars = text.length;\n    const isLong = words > 15;\n    \n    return {\n      wordCount: words,\n      charCount: chars,\n      isLong\n    };\n  });\n\n  function clearText() {\n    text = \"\";\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text}\n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textStats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textStats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textStats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n  \n  let textStats = $derived.by(() => {\n    const words = text.trim() === '' ? 0 : text.trim().split(/\\s+/).length;\n    const chars = text.length;\n    const isLong = words > 15;\n    \n    return { words, chars, isLong };\n  });\n  \n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textStats.words}</p>\n    <p data-testid=\"char-count\">Characters: {textStats.chars}</p>\n    <p data-testid=\"length-indicator\">Status: {textStats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n  \n  let stats = $derived.by(() => {\n    const wordCount = text.trim() === '' ? 0 : text.trim().split(/\\s+/).length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    \n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n  \n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n  \n  let textStats = $derived.by(() => {\n    const wordCount = text.trim() === '' ? 0 : text.trim().split(/\\s+/).length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    \n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n  \n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textStats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textStats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textStats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n  \n  let textAnalysis = $derived.by(() => {\n    const wordCount = text.trim() === '' ? 0 : text.trim().split(/\\s+/).length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    \n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n  \n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textAnalysis.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textAnalysis.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textAnalysis.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const textStats = $derived.by(() => {\n    const wordCount = text.trim() === '' ? 0 : text.trim().split(/\\s+/).length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    \n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textStats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textStats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textStats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"word-count\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"\");\n  \n  let textAnalysis = $derived.by(() => {\n    const wordCount = text.trim() === \"\" ? 0 : text.trim().split(/\\s+/).length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    \n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n  \n  function clearText() {\n    text = \"\";\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textAnalysis.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textAnalysis.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textAnalysis.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"\");\n  \n  let textStats = $derived.by(() => {\n    const wordCount = text.trim() === \"\" ? 0 : text.trim().split(/\\s+/).length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    \n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n  \n  function clearText() {\n    text = \"\";\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textStats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textStats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textStats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n  \n  let textStats = $derived.by(() => {\n    const wordCount = text.trim() === '' ? 0 : text.trim().split(/\\s+/).length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    \n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n  \n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textStats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textStats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textStats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "each",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    if (!$state.characters.includes(\"George\")) {\n      $state.characters = [...$state.characters, \"George\"];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    if (!$state.characters.includes(\"George\")) {\n      $state.characters = [...$state.characters, \"George\"];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    $state.characters = [...$state.characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    if (!$state.characters.includes(\"George\")) {\n      $state.characters = [...$state.characters, \"George\"];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /tmp/anthropic/Component.svelte (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/Component.svelte) in /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts. Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    if (!$state.characters.includes(\"George\")) {\n      $state.characters = [...$state.characters, \"George\"];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    $state.characters = [...$state.characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    if (!$state.characters.includes(\"George\")) {\n      $state.characters = [...$state.characters, \"George\"];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    if (!$state.characters.includes(\"George\")) {\n      $state.characters = [...$state.characters, \"George\"];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    if (!$state.characters.includes(\"George\")) {\n      $state.characters = [...$state.characters, \"George\"];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    characters: [\"Jerry\", \"Elaine\", \"Kramer\"]\n  };\n\n  function addGeorge() {\n    $state.characters = [...$state.characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-14pzzc4\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-14pzzc4\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 4,
    "pass1": 0.4,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"number-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-1grwdk4\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-1grwdk4\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n  \n  $effect(() => {\n    doubled = number * 2;\n  });\n  \n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 8,
    "pass1": 0.7999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No imports needed\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No imports needed for Svelte 5 runes\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script logic needed for this simple component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/hello-world.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/hello-world.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No imports needed for basic Svelte 5 component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:10:2 Cannot assign to constant\nhttps://svelte.dev/e/constant_assignment"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  $inspect(text);\n  \n  $inspect(text).with((value, previous) => {\n    console.log(Text updated from \"${previous}\" to \"${value}\");\n  });\n  \n  $effect(() => {\n    $inspect.trace();\n    console.log(Effect running for text: ${text});\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"text-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<h1\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"name-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mHello, World!\u001b[0m\n      \u001b[36m</h1>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCount: 0\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<h1\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"name-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mHello, World!\u001b[0m\n      \u001b[36m</h1>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCount: 0\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<h1\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"name-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mHello, World!\u001b[0m\n      \u001b[36m</h1>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCount: 0\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<h1\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"name-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mHello, World!\u001b[0m\n      \u001b[36m</h1>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCount: 0\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  $inspect(text);\n  \n  $inspect(text).with((value, prev) => {\n    console.log(Text updated from \"${prev}\" to \"${value}\");\n  });\n  \n  $effect(() => {\n    $inspect.trace();\n    console.log(Effect running because text changed to: ${text});\n  });\n  \n  const charCount = $derived(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"text-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<h1\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"name-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mHello, World!\u001b[0m\n      \u001b[36m</h1>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCount: 0\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<h1\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"name-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mHello, World!\u001b[0m\n      \u001b[36m</h1>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCount: 0\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<h1\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"name-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mHello, World!\u001b[0m\n      \u001b[36m</h1>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCount: 0\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<h1\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"name-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mHello, World!\u001b[0m\n      \u001b[36m</h1>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-display\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mCount: 0\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  // Basic $inspect\n  $inspect(text);\n  \n  // $inspect with custom callback\n  $inspect(text).with((value, previous) => {\n    console.log(Text changed from \"${previous}\" to \"${value}\");\n  });\n  \n  // Using $inspect.trace in an effect\n  $effect(() => {\n    $inspect.trace();\n    console.log(Text is now: ${text});\n  });\n  \n  // Derived value\n  const charCount = $derived(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  $inspect(text);\n  \n  $inspect(text).with((value, prevValue) => {\n    console.log(Text updated from \"${prevValue}\" to \"${value}\");\n  });\n  \n  $effect(() => {\n    $inspect.trace();\n    console.log(Effect running for text: ${text});\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /tmp/anthropic/Component.svelte (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/Component.svelte) in /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/inspect.test.ts. Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  $inspect(text);\n  \n  $inspect(text).with((value, change) => {\n    console.log(Text changed: ${change?.prev} → ${value});\n  });\n  \n  $effect(() => {\n    $inspect.trace();\n    console.log(Effect running for text: ${text});\n  });\n  \n  const charCount = $derived(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/inspect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/inspect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  $inspect(text);\n  \n  $inspect(text).with((value, prevValue) => {\n    console.log(Text updated from \"${prevValue}\" to \"${value}\");\n  });\n  \n  $effect(() => {\n    $inspect.trace();\n    console.log(Effect running for text: ${text});\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /tmp/anthropic/Component.svelte (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/Component.svelte) in /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/inspect.test.ts. Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  $inspect(text);\n  \n  $inspect(text).with((value, previous) => {\n    console.log(Text updated from \"${previous}\" to \"${value}\");\n  });\n  \n  $effect(() => {\n    $inspect.trace();\n    console.log(The text is now: ${text});\n  });\n  \n  const charCount = $derived(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  $inspect(text);\n  \n  $inspect(text).with((value, previous) => {\n    console.log(Text updated from \"${previous}\" to \"${value}\");\n  });\n  \n  $effect(() => {\n    $inspect.trace();\n    console.log(Text changed to: ${text});\n  });\n  \n  const charCount = $derived(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:12:10 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  // Basic inspect\n  $inspect(text);\n  \n  // Inspect with custom callback\n  $inspect(text).with((value, previous) => {\n    console.log(Text changed from \"${previous}\" to \"${value}\");\n  });\n  \n  // Inspect trace in effect\n  $effect(() => {\n    $inspect.trace();\n    console.log(Current text is: ${text});\n  });\n  \n  // Character count is automatically derived\n  const characterCount = $derived(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {characterCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:11:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  \n  $inspect(text);\n  \n  $inspect(text).with((value, previous) => {\n    console.log(Text updated from \"${previous}\" to \"${value}\");\n  });\n  \n  $effect(() => {\n    $inspect.trace();\n    console.log(Effect running for text: ${text});\n  });\n  \n  const charCount = $derived(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "props",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 1,
    "pass1": 0.09999999999999998,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n\n  let $state = { count: $props.count };\n\n  function incrementCount() {\n    $state.count++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n\n  let $state = { count: $props.count };\n\n  function incrementCount() {\n    $state.count++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props();\n  let $state = { count };\n\n  function increment() {\n    $state.count++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:12:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n\n  let localCount = $state($props.count);\n\n  function incrementCount() {\n    localCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {localCount}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {localCount}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n  \n  let $state = {\n    count: $props.count\n  };\n  \n  function incrementCount() {\n    $state.count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n\n  let localCount = $state($props.count);\n\n  function increment() {\n    localCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {localCount}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {localCount}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n  \n  let $state = { count: $props.count };\n  \n  function increment() {\n    $state.count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails.toString()}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n\n  let counter = $state($props.count);\n  \n  function incrementCount() {\n    counter++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {counter}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {counter}</p>\n      <p>ShowDetails is {$props.showDetails.toString()}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count: initialCount = 0, showDetails = false } = $props();\n  let count = $state(initialCount);\n\n  function increment() {\n    count++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n  \n  let $state = { count: $props.count };\n  \n  function incrementCount() {\n    $state.count++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "Anthropic",
    "modelId": "claude-3-7-sonnet-20250219",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  const title = (bookTitle) => {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  function title(bookTitle) {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  const title = (bookTitle) => {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  function title(bookTitle) {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  function title(bookTitle) {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  const title = (bookTitle) => {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  /** @snippet */\n  function title(bookTitle) {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  const title = (bookTitle) => {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  const title = (bookTitle) => {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  function title(bookTitle) {\n    return (\n      <span data-testid=\"book-title\">{bookTitle}</span>\n    );\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "counter",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 8,
    "pass1": 0.7999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<script>\n  let count = $state(0);\n</script>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n    <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n    <span data-testid=\"count-value\">{count}</span>\n    <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n    .counter {\n        display: flex;\n        align-items: center;\n        gap: 10px;\n    }\n</style>\n\n<script>\n    let count = $state(0);\n</script>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<script>\n  let count = $state(0);\n</script>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<script>\n  let count = $state(0);\n</script>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<script>\n  let count = $state(0);\n</script>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<script>\n  let count = $state(0);\n</script>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<script>\n  let count = $state(0);\n</script>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<script>\n  let count = $state(0);\n</script>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<script>\n  let count = $state(0);\n</script>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<script>\n  let count = $state(0);\n</script>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 8,
    "pass1": 0.7999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function incrementNumber() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={incrementNumber}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 9,
    "pass1": 0.9,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\n\tconst wordCount = $derived.by(() => {\n\t\treturn text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n\t});\n\n\tconst charCount = $derived.by(() => {\n\t\treturn text.length;\n\t});\n\n\tconst isLongText = $derived.by(() => {\n\t\treturn wordCount > 15;\n\t});\n\n\tfunction clearText() {\n\t\ttext = '';\n\t}\n</script>\n\n<div>\n\t<input \n\t\tdata-testid=\"text-input\" \n\t\ttype=\"text\" \n\t\tbind:value={text} \n\t/>\n\t<button \n\t\tdata-testid=\"clear-button\" \n\t\ton:click={clearText}\n\t>\n\t\tClear\n\t</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount}</p>\n\t\t<p data-testid=\"length-indicator\">\n\t\t\tStatus: {isLongText ? 'Long text' : 'Short text'}\n\t\t</p>\n\t</div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\n\tconst wordCount = $derived.by(() => {\n\t\treturn text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n\t});\n\n\tconst charCount = $derived.by(() => {\n\t\treturn text.length;\n\t});\n\n\tconst isLongText = $derived.by(() => {\n\t\treturn wordCount > 15;\n\t});\n\n\tfunction clearText() {\n\t\ttext = '';\n\t}\n</script>\n\n<div>\n\t<input \n\t\tdata-testid=\"text-input\"\n\t\ttype=\"text\" \n\t\tbind:value={text}\n\t/>\n\t<button \n\t\tdata-testid=\"clear-button\"\n\t\ton:click={clearText}\n\t>\n\t\tClear\n\t</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount}</p>\n\t\t<p data-testid=\"length-indicator\">\n\t\t\tStatus: {isLongText ? 'Long text' : 'Short text'}\n\t\t</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const wordCount = $derived.by(() => {\n    return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n  });\n\n  const charCount = $derived.by(() => {\n    return text.length;\n  });\n\n  const isLongText = $derived.by(() => {\n    return wordCount > 15;\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {isLongText ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\n\tconst wordCount = $derived.by(() => {\n\t\treturn text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n\t});\n\n\tconst charCount = $derived.by(() => {\n\t\treturn text.length;\n\t});\n\n\tconst isLongText = $derived.by(() => {\n\t\treturn wordCount > 15;\n\t});\n\n\tfunction clearText() {\n\t\ttext = '';\n\t}\n</script>\n\n<div>\n\t<input \n\t\tdata-testid=\"text-input\" \n\t\ttype=\"text\" \n\t\tbind:value={text} \n\t/>\n\t<button \n\t\tdata-testid=\"clear-button\" \n\t\ton:click={clearText}\n\t>\n\t\tClear\n\t</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount}</p>\n\t\t<p data-testid=\"length-indicator\">\n\t\t\tStatus: {isLongText ? 'Long text' : 'Short text'}\n\t\t</p>\n\t</div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet text = $state('');\n\nconst wordCount = $derived.by(() => {\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n});\n\nconst charCount = $derived.by(() => {\n  return text.length;\n});\n\nconst isLongText = $derived.by(() => {\n  return wordCount > 15;\n});\n\nfunction clearText() {\n  text = '';\n}\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLongText ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet text = $state('');\n\nconst wordCount = $derived.by(() => {\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n});\n\nconst charCount = $derived.by(() => {\n  return text.length;\n});\n\nconst isLongText = $derived.by(() => {\n  return wordCount > 15;\n});\n\nfunction clearText() {\n  text = '';\n}\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {isLongText ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('')\n\n\tconst stats = $derived.by(() => {\n\t\tconst words = text.trim().split(/\\s+/).filter(word => word.length > 0).length\n\t\tconst chars = text.length\n\t\tconst isLong = words > 15\n\n\t\treturn {\n\t\t\twords,\n\t\t\tchars,\n\t\t\tisLong\n\t\t}\n\t})\n\n\tfunction clearText() {\n\t\ttext = ''\n\t}\n</script>\n\n<div>\n\t<input \n\t\tdata-testid=\"text-input\" \n\t\ttype=\"text\" \n\t\tbind:value={text} \n\t/>\n\t<button \n\t\tdata-testid=\"clear-button\"\n\t\ton:click={clearText}\n\t>\n\t\tClear\n\t</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {stats.words}</p>\n\t\t<p data-testid=\"char-count\">Characters: {stats.chars}</p>\n\t\t<p data-testid=\"length-indicator\">\n\t\t\tStatus: {stats.isLong ? 'Long text' : 'Short text'}\n\t\t</p>\n\t</div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet text = $state('');\n\nconst textStats = $derived.by(() => {\n  const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n  const wordCount = words.length;\n  const charCount = text.length;\n  const isLongText = wordCount > 15;\n\n  return {\n    wordCount,\n    charCount,\n    isLongText\n  };\n});\n\nfunction clearText() {\n  text = '';\n}\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">\n      Words: {textStats.wordCount}\n    </p>\n    <p data-testid=\"char-count\">\n      Characters: {textStats.charCount}\n    </p>\n    <p data-testid=\"length-indicator\">\n      Status: {textStats.isLongText ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\n\tconst wordCount = $derived.by(() => {\n\t\treturn text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n\t});\n\n\tconst charCount = $derived.by(() => {\n\t\treturn text.length;\n\t});\n\n\tconst isLongText = $derived.by(() => {\n\t\treturn wordCount > 15;\n\t});\n\n\tfunction clearText() {\n\t\ttext = '';\n\t}\n</script>\n\n<div>\n\t<input \n\t\tdata-testid=\"text-input\" \n\t\ttype=\"text\" \n\t\tbind:value={text} \n\t/>\n\t<button \n\t\tdata-testid=\"clear-button\" \n\t\ton:click={clearText}\n\t>\n\t\tClear\n\t</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {charCount}</p>\n\t\t<p data-testid=\"length-indicator\">\n\t\t\tStatus: {isLongText ? 'Long text' : 'Short text'}\n\t\t</p>\n\t</div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet text = $state('');\n\nconst wordCount = $derived.by(() => {\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n});\n\nconst charCount = $derived.by(() => {\n  return text.length;\n});\n\nconst isLongText = $derived.by(() => {\n  return wordCount > 15;\n});\n\nfunction clearText() {\n  text = '';\n}\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {isLongText ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "each",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 4,
    "pass1": 0.4,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n    function addGeorge() {\n        characters = [...characters, \"George\"];\n    }\n</script>\n\n<div>\n    <ul data-testid=\"characters-list\">\n        {#each characters as character}\n            <li data-testid=\"character\">{character}</li>\n        {/each}\n    </ul>\n    <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n    function addGeorge() {\n        characters = [...characters, \"George\"];\n    }\n</script>\n\n<div>\n    <ul data-testid=\"characters-list\">\n        {#each characters as character}\n            <li data-testid=\"character\">{character}</li>\n        {/each}\n    </ul>\n    <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\nfunction addGeorge() {\n  characters = [...characters, \"George\"];\n}\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  function addGeorge() {\n    if (!characters.includes('George')) {\n      characters = [...characters, 'George'];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n    function addGeorge() {\n        if (!characters.includes(\"George\")) {\n            characters = [...characters, \"George\"];\n        }\n    }\n</script>\n\n<div>\n    <ul data-testid=\"characters-list\">\n        {#each characters as character}\n            <li data-testid=\"character\">{character}</li>\n        {/each}\n    </ul>\n    <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 6,
    "pass1": 0.5999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let number = $state(5);\n    let doubled = $state(0);\n\n    $effect(() => {\n        doubled = number * 2;\n    });\n</script>\n\n<div>\n    <p data-testid=\"number-value\">Number: {number}</p>\n    <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n    <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5)\n  let doubled = $state(0)\n\n  $effect(() => {\n    doubled = number * 2\n  })\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/effect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 5,
    "pass1": 0.5,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    Hello, World!\n</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 20px;\n    }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/hello-world.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/hello-world.test.ts). Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    Hello, World!\n</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 20px;\n    }\n</style>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let message = $state(\"Hello, World!\");\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  {message}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n    font-size: 24px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    Hello, World!\n</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 20px;\n    }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let greeting = \"Hello, World!\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  {greeting}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n    font-size: 24px;\n  }\n</style>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let greeting = 'Hello, World!';\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  {greeting}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let greeting = 'Hello, World!';\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  {greeting}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/hello-world.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/hello-world.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet greeting = $state(\"Hello, World!\");\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n\t{greeting}\n</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    Hello, World!\n</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 20px;\n    }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  $inspect(text);\n\n  $inspect(text).with((value) => {\n    console.log(Input updated to: ${value});\n  });\n\n  $effect(() => {\n    $inspect.trace(text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"text-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('Hello world');\n\n\t$inspect(text);\n\n\t$inspect(text).with((value) => {\n\t\tconsole.log(Input updated to: ${value});\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace(text);\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"text-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t$inspect(text);\n\n\t$inspect(text).with((newValue, oldValue) => {\n\t\tconsole.log(Text changed from \"${oldValue}\" to \"${newValue}\");\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace(text);\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"text-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state(\"Hello world\");\n\n    $inspect(text);\n\n    $inspect(text).with((current, previous) => {\n        console.log(Text changed from \"${previous}\" to \"${current}\");\n    });\n\n    $effect(() => {\n        $inspect.trace(text);\n    });\n</script>\n\n<div>\n    <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n    <p data-testid=\"text-value\">Current text: {text}</p>\n    <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"text-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: 10\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t$inspect(text);\n\n\t$inspect(text).with((value) => {\n\t\tconsole.log(Input updated to: ${value});\n\t});\n\n\t$effect(() => {\n\t\t$inspect.trace(text);\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: {text}</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:20 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  $inspect(text);\n\n  $inspect(text).with((value) => {\n    console.log(Input value updated to: ${value});\n  });\n\n  $effect(() => {\n    $inspect.trace(text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:22 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  $inspect(text);\n\n  $inspect(text).with((value) => {\n    console.log(Input updated to: ${value});\n  });\n\n  $effect(() => {\n    $inspect.trace(text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:22 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  $inspect(text);\n\n  $inspect(text).with((value) => {\n    console.log(Input updated to: ${value});\n  });\n\n  $effect(() => {\n    $inspect.trace(text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:22 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  $inspect(text);\n\n  $inspect(text).with((value) => {\n    console.log(Text updated to: ${value});\n  });\n\n  $effect(() => {\n    $inspect.trace(text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\")\n\n  $inspect(text)\n\n  $inspect(text).with((newValue) => {\n    console.log(Text updated to: ${newValue})\n  })\n\n  $effect(() => {\n    $inspect.trace(text)\n  })\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"text-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-x4t3bf\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-x4t3bf\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-x4t3bf\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"greeting svelte-x4t3bf\"\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"greeting\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "props",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 3,
    "pass1": 0.30000000000000004,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst props = $props();\n\tconst name = props.name ?? \"World\";\n\tconst count = $state(props.count ?? 0);\n\tconst showDetails = props.showDetails ?? false;\n\n\tfunction incrementCount() {\n\t\tcount++;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {count}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {count}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:10:2 Cannot assign to constant\nhttps://svelte.dev/e/constant_assignment"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst props = $props();\n\tconst name = props.name ?? \"World\";\n\tconst count = $state(props.count ?? 0);\n\tconst showDetails = props.showDetails ?? false;\n\n\tfunction incrementCount() {\n\t\tcount++;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {count}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {count}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/props.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/props.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst props = $props();\n\tconst { \n\t\tname = \"World\", \n\t\tcount: initialCount = 0, \n\t\tshowDetails = false \n\t} = props;\n\n\tlet count = $state(initialCount);\n\n\tfunction incrementCount() {\n\t\tcount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {count}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {count}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/props.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/props.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst { name = \"World\", count = 0, showDetails = false } = $props();\n\n\tlet currentCount = $state(count);\n\n\tfunction incrementCount() {\n\t\tcurrentCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {currentCount}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "Failed to resolve import \"./Component.svelte\" from \"tmp/anthropic/props.test.ts\". Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst { name = \"World\", count = 0, showDetails = false } = $props();\n\tlet localCount = $state(count);\n\n\tfunction incrementCount() {\n\t\tlocalCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {localCount}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {localCount}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst props = $props();\n\t\n\tlet {\n\t\tname = \"World\",\n\t\tcount = 0,\n\t\tshowDetails = false\n\t} = props;\n\n\tlet reactiveCount = $state(count);\n\n\tfunction incrementCount() {\n\t\treactiveCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {reactiveCount}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {reactiveCount}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst props = $props();\n\tconst {\n\t\tname = \"World\",\n\t\tcount: initialCount = 0,\n\t\tshowDetails = false\n\t} = props;\n\n\tlet count = $state(initialCount);\n\n\tfunction incrementCount() {\n\t\tcount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {count}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {count}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst props = $props()\n\tconst {\n\t\tname = \"World\",\n\t\tcount: initialCount = 0,\n\t\tshowDetails = false\n\t} = props\n\n\tlet count = $state(initialCount)\n\n\tfunction incrementCount() {\n\t\tcount += 1\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {count}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {count}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:9:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst { name = \"World\", count = 0, showDetails = false } = $props();\n\n\tlet localCount = $state(count);\n\n\tfunction incrementCount() {\n\t\tlocalCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {localCount}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {localCount}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst props = $props();\n\tconst name = props.name ?? \"World\";\n\tconst count = $state(props.count ?? 0);\n\tconst showDetails = props.showDetails ?? false;\n\n\tfunction incrementCount() {\n\t\tcount++;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {count}</p>\n\t<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {count}</p>\n\t\t\t<p>ShowDetails is true</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:10:2 Cannot assign to constant\nhttps://svelte.dev/e/constant_assignment"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "Anthropic",
    "modelId": "claude-3-5-haiku-20241022",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\n\t\t\"The Lord of the Rings\", \n\t\t\"To Kill a Mockingbird\", \n\t\t\"1984\"\n\t];\n\n\tconst title = (bookTitle) => {\n\t\treturn () => {\n\t\t\treturn <span data-testid=\"book-title\">{bookTitle}</span>\n\t\t}\n\t}\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)()}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/snippets.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/snippets.test.ts). Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\n\t\t\"The Lord of the Rings\",\n\t\t\"To Kill a Mockingbird\", \n\t\t\"1984\"\n\t];\n\n\tconst title = (book) => {\n\t\treturn <span data-testid=\"book-title\">{book}</span>\n\t};\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:11:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\n\t\t\"The Lord of the Rings\",\n\t\t\"To Kill a Mockingbird\", \n\t\t\"1984\"\n\t];\n\n\tconst title = (name) => {\n\t\treturn () => <span data-testid=\"book-title\">{name}</span>;\n\t};\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:11:15 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = ['The Lord of the Rings', 'To Kill a Mockingbird', '1984'];\n\n  const title = (bookTitle) => {\n    return () => {\n      return <span data-testid=\"book-title\">{bookTitle}</span>\n    }\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:8:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\", \n    \"1984\"\n  ];\n\n  const title = (bookTitle) => {\n    return () => {\n      return <span data-testid=\"book-title\">{bookTitle}</span>;\n    };\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:12:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\", \n    \"1984\"\n  ];\n\n  const title = (bookTitle) => {\n    return <span data-testid=\"book-title\">{bookTitle}</span>\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:11:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\", \n    \"1984\"\n  ];\n\n  const title = (bookTitle) => {\n    return () => {\n      return <span data-testid=\"book-title\">{bookTitle}</span>\n    }\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:12:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\", \n    \"1984\"\n  ];\n\n  const title = (bookTitle) => {\n    return () => {\n      return <span data-testid=\"book-title\">{bookTitle}</span>;\n    };\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/snippets.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/anthropic/snippets.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\", \n    \"1984\"\n  ];\n\n  const title = (bookTitle) => {\n    return <span data-testid=\"book-title\">{bookTitle}</span>\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:11:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\", \n    \"1984\"\n  ];\n\n  const title = (bookTitle) => {\n    return () => {\n      return <span data-testid=\"book-title\">{bookTitle}</span>\n    }\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/anthropic/Component.svelte:12:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "counter",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 6,
    "pass1": 0.5999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-family: sans-serif;\n  }\n  button {\n    padding: 5px 10px;\n    cursor: pointer;\n  }\n  span {\n    font-weight: bold;\n    min-width: 20px;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    /* Basic styling placeholder */\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 8px; /* Optional: add some spacing */\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-family: sans-serif;\n  }\n  button {\n    min-width: 2rem;\n    padding: 0.25rem 0.5rem;\n  }\n  span {\n    min-width: 2rem;\n    text-align: center;\n    font-weight: bold;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-family: sans-serif;\n  }\n  button {\n    padding: 0.25rem 0.75rem;\n    font-size: 1rem;\n    cursor: pointer;\n  }\n  span {\n    font-size: 1.2rem;\n    min-width: 2ch;\n    text-align: center;\n    font-variant-numeric: tabular-nums;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n  button {\n    padding: 5px 10px;\n    font-size: 1rem;\n    cursor: pointer;\n  }\n  span {\n    font-size: 1.2rem;\n    min-width: 2ch;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    /* Add any desired styles for the counter container */\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n\n  button {\n    padding: 4px 8px;\n    cursor: pointer;\n  }\n\n  span {\n    min-width: 20px;\n    text-align: center;\n    font-weight: bold;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    /* Add styles if needed, or leave empty */\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n\n  button {\n    padding: 4px 8px;\n    font-size: 1rem;\n    cursor: pointer;\n  }\n\n  span {\n    font-size: 1.2rem;\n    min-width: 20px;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-family: sans-serif;\n  }\n  button {\n    padding: 5px 10px;\n    cursor: pointer;\n  }\n  span {\n    min-width: 20px;\n    text-align: center;\n    font-weight: bold;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 5,
    "pass1": 0.5,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(5);\n  let doubled = $derived(count * 2);\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {count}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"number-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<input\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"text-input\"\u001b[39m\n        \u001b[33mtype\u001b[39m=\u001b[32m\"text\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"clear-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mClear\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<div>\u001b[39m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"word-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mWords: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"char-count\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mCharacters: 0\u001b[0m\n        \u001b[36m</p>\u001b[39m\n        \u001b[0m \u001b[0m\n        \u001b[36m<p\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"length-indicator\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mStatus: Short text\u001b[0m\n        \u001b[36m</p>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"number-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/derived.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/derived.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"number-value\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 8,
    "pass1": 0.7999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const stats = $derived.by(() => {\n    const trimmedText = text.trim();\n    const words = trimmedText === '' ? [] : trimmedText.split(/\\s+/);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text here...\" />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {stats.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  let stats = $derived.by(() => {\n    const currentText = text; // Read the state variable\n    // Handle empty or whitespace-only strings correctly for word count\n    const words = currentText.trim() === '' ? [] : currentText.trim().split(/\\s+/);\n    const wordCount = words.length;\n    const charCount = currentText.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text here...\" />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"\");\n\n  const stats = $derived.by(() => {\n    const trimmedText = text.trim();\n    const words = trimmedText === \"\" ? [] : trimmedText.split(/\\s+/);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = \"\";\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text here...\" />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"word-count\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: \u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: \u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"number-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mNumber: 5\u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<p\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"doubled-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mDoubled: \u001b[0m\n      \u001b[36m</p>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mIncrement\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\n\tconst stats = $derived.by(() => {\n\t\tconst trimmedText = text.trim();\n\t\tconst words = trimmedText === '' ? [] : trimmedText.split(/\\s+/);\n\t\tconst wordCount = words.length;\n\t\tconst charCount = text.length;\n\t\tconst isLong = wordCount > 15;\n\t\treturn { wordCount, charCount, isLong };\n\t});\n\n\tfunction clearText() {\n\t\ttext = '';\n\t}\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text here...\" />\n\t<button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n\t<div>\n\t\t<p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n\t</div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const stats = $derived.by(() => {\n    const trimmedText = text.trim();\n    const words = trimmedText === '' ? [] : trimmedText.split(/\\s+/);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text here...\" />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const stats = $derived.by(() => {\n    const trimmedText = text.trim();\n    const words = trimmedText === '' ? [] : trimmedText.split(/\\s+/);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const stats = $derived.by(() => {\n    const trimmedText = text.trim();\n    const words = trimmedText === '' ? [] : trimmedText.split(/\\s+/);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text...\" />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {stats.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:11:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const stats = $derived.by(() => {\n    const words = text.trim() === '' ? [] : text.trim().split(/\\s+/);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text here...\" />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {stats.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const stats = $derived.by(() => {\n    const trimmedText = text.trim();\n    const wordCount = trimmedText === '' ? 0 : trimmedText.split(/\\s+/).length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text here...\" />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet text = $state('');\n\nconst stats = $derived.by(() => {\n  const trimmedText = text.trim();\n  const words = trimmedText ? trimmedText.split(/\\s+/).filter(Boolean) : [];\n  const wordCount = words.length;\n  const charCount = text.length;\n  const isLong = wordCount > 15;\n\n  return { wordCount, charCount, isLong };\n});\n\nfunction clearText() {\n  text = '';\n}\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} placeholder=\"Enter text here...\" />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "each",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 6,
    "pass1": 0.5999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n    // Need to reassign for Svelte 4 reactivity, but not needed with runes\n    // characters = characters; // This line is NOT needed in Svelte 5 with runes\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n    // In Svelte 5 with runes, mutating the state array directly is enough\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n    // Svelte 5 runes automatically handle reactivity, no need for characters = characters\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:6:3 Unexpected character '@'\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 9,
    "pass1": 0.9,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0); // Initialize doubled state\n\n  // Use $effect to reactively update 'doubled' when 'number' changes\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:10:3 Unexpected character '@'\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0); // Initialize doubled state\n\n  // $effect runs whenever 'number' changes\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>\n    Increment\n  </button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0); // Needs to be stateful to be updated by the effect\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(number * 2); // Initial calculation\n\n  // Use $effect to recalculate 'doubled' when 'number' changes\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0); // Initialize doubled state\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0); // Initialize doubled\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0); // Initial value, will be updated by the effect\n\n  $effect(() => {\n    doubled = number * 2;\n    // console.log(Effect ran: number is ${number}, doubled is ${doubled}); // Optional: for debugging\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0); // Initialize doubled state\n\n  // Use $effect to update 'doubled' whenever 'number' changes\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>\n    Increment\n  </button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 10,
    "pass1": 1,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 0.5rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Svelte 5 component - no specific Svelte 5 features needed for this simple case.\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px; /* Small margin */\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem; /* Small margin */\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic inspect - logs reads and writes\n  $inspect(text);\n\n  // Inspect with custom callback - logs only writes (updates)\n  $inspect(text).with(value => {\n    console.log('Custom inspect (update):', value);\n  });\n\n  // Effect that runs when text changes\n  $effect(() => {\n    // Read the text to establish dependency\n    const currentText = text;\n    console.log('Effect running due to text change:', currentText);\n    // Trace dependencies leading to this effect run\n    $inspect.trace();\n  });\n\n  // Derived value (character count)\n  let charCount = $derived(text.length);\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:20:4 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic inspection - logs the value whenever it changes\n  $inspect(text);\n\n  // Inspection with a custom callback\n  $inspect(text).with((value) => {\n    console.log([Custom Inspector] Text changed to: \"${value}\");\n  });\n\n  // Use $inspect.trace() within an effect to see dependencies\n  $effect(() => {\n    // Read the state to establish dependency\n    const len = text.length;\n    console.log(Effect triggered. Text length is now ${len}. Tracing dependencies:);\n    // Trace which signals caused this effect to rerun\n    $inspect.trace();\n  });\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:11:24 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // 2. Basic $inspect to log the input value\n  $inspect(text);\n\n  // 3. Implement $inspect(...).with to track updates with a custom callback\n  $inspect(text).with(currentValue => {\n    console.log([Inspect With] Text updated: \"${currentValue}\");\n  });\n\n  // 4. Implement $inspect.trace() inside an effect\n  $effect(() => {\n    // Read the state variable to establish dependency\n    const currentText = text;\n    console.log(\"Effect triggered by text change.\");\n    // Trace the dependencies that caused this effect to run\n    $inspect.trace();\n  });\n</script>\n\n<div>\n  <!-- 6. Input field -->\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\n  <!-- 7. Display the input value -->\n  <p data-testid=\"text-value\">Current text: {text}</p>\n\n  <!-- 5. & 8. Display the character count -->\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:11:25 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic inspection - logs the value whenever it changes\n  $inspect(text);\n\n  // Inspection with a custom callback\n  $inspect(text).with(value => {\n    console.log('[Inspect with callback] Text changed to:', value);\n  });\n\n  // Inspection trace inside an effect\n  $effect(() => {\n    // This effect runs whenever 'text' changes\n    const currentLength = text.length; // Depend on text\n    console.log([Effect] Text changed. Current length: ${currentLength}. Tracing origin...);\n    $inspect.trace(); // Log the call stack leading to this effect execution\n  });\n\n</script>\n\n<div>\n  <label>\n    Edit text:\n    <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  </label>\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:18:25 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  let charCount = $derived(text.length);\n\n  // Basic $inspect - logs initial value and updates\n  $inspect(text);\n\n  // $inspect with a custom callback\n  $inspect(text).with((value) => {\n    console.log([Inspect Callback] Text changed to: \"${value}\" (Length: ${value.length}));\n  });\n\n  // $inspect.trace() inside an effect\n  $effect(() => {\n    // Read text to establish dependency for the effect\n    const currentText = text;\n    console.log(Effect triggered by text change. Current value: \"${currentText}\");\n    $inspect.trace(); // Log the dependency trace for this effect run\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:12:25 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic $inspect\n  $inspect(text);\n\n  // $inspect(...).with custom callback\n  $inspect(text).with(value => {\n    console.log(Text changed via custom inspector: ${value});\n  });\n\n  // $inspect.trace() inside an effect\n  $effect(() => {\n    // Read the text to establish dependency\n    const currentLength = text.length;\n    console.log(Effect running. Current length: ${currentLength});\n    // Trace what caused this effect to run\n    $inspect.trace();\n  });\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:11:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic $inspect logging\n  $inspect(text);\n\n  // $inspect with a custom callback\n  $inspect(text).with(value => {\n    console.log(%c[Inspect With Callback] Text updated: \"${value}\", 'color: blue');\n  });\n\n  // $inspect.trace() inside an effect\n  $effect(() => {\n    // Read the state variable to establish dependency\n    const currentLength = text.length;\n    console.log(%c[Effect Run] Text length changed to: ${currentLength}, 'color: green');\n    // Trace why this effect ran\n    $inspect.trace();\n  });\n\n  // Derived value for character count\n  const charCount = $derived(text.length);\n\n</script>\n\n<div>\n  <label>\n    Edit Text:\n    <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  </label>\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:11:16 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic inspection\n  $inspect(text);\n\n  // Inspection with a custom callback\n  $inspect(text).with(value => {\n    console.log(Custom inspector update: \"${value}\");\n  });\n\n  // Effect that depends on text\n  $effect(() => {\n    // Read text to establish dependency\n    const currentText = text;\n    console.log('Effect running due to text change.');\n    // Trace dependencies when the effect runs\n    $inspect.trace();\n    // Optional: Log the value being processed by the effect\n    // console.log(Effect observed text: \"${currentText}\");\n  });\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:11:23 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // 1. Basic inspect - logs reads and updates\n  $inspect(text);\n\n  // 2. Inspect with custom callback for updates\n  $inspect(text).with((value, type) => {\n    if (type === 'update') {\n      console.log(%c[Inspect with] Text updated to: \"${value}\", 'color: blue');\n    } else if (type === 'init') {\n        console.log(%c[Inspect with] Text initialized to: \"${value}\", 'color: green');\n    }\n  });\n\n  // 3. Effect with trace\n  $effect(() => {\n    // Read the state variable to establish dependency\n    const currentLength = text.length;\n    console.log(%c[Effect] Effect triggered. Current length: ${currentLength}, 'color: orange');\n    // Trace the origin of this effect execution\n    $inspect.trace();\n  });\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:12:18 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic $inspect\n  $inspect(text);\n\n  // $inspect(...).with\n  $inspect(text).with(value => {\n    console.log([Custom Inspector] Text changed via 'with': \"${value}\");\n  });\n\n  // $inspect.trace() inside an effect\n  $effect(() => {\n    $inspect.trace(); // Log dependencies for this effect\n    // Use text to ensure the effect runs when text changes\n    const currentText = text;\n    console.log([Effect Run] Text is now: \"${currentText}\");\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:11:24 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "props",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 10,
    "pass1": 1,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = \"World\", count: initialCount = 0, showDetails = false } = $props();\n  let count = $state(initialCount);\n\n  function increment() {\n    count++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name prop is {name}</p>\n      <p>Initial Count prop is {initialCount}</p>\n      <p>ShowDetails prop is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = \"World\", count: initialCount = 0, showDetails = false } = $props();\n  let currentCount = $state(initialCount);\n\n  function increment() {\n    currentCount += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Prop Name is {name}</p>\n      <p>Prop Initial Count is {initialCount}</p>\n      <p>Prop ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet {\n  name = \"World\",\n  count = 0,\n  showDetails = false\n} = $props();\n\nlet currentCount = $state(count);\n\nfunction increment() {\n  currentCount += 1;\n}\n\n$effect(() => {\n    // Update local state if the prop changes externally after initial render\n    currentCount = count;\n});\n\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Initial Count prop is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet {\n\t\tname = \"World\",\n\t\tcount = 0, // Prop 'count'\n\t\tshowDetails = false\n\t} = $props();\n\n\t// Initialize state from the prop 'count'\n\tlet currentCount = $state(count);\n\n\tfunction increment() {\n\t\tcurrentCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {count}</p>\n\t\t\t<p>ShowDetails is {showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = \"World\", count: initialCount = 0, showDetails = false } = $props();\n  let count = $state(initialCount);\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Prop 'name': {name}</p>\n      <p>Prop 'count' (initial): {initialCount}</p>\n      <p>Prop 'showDetails': {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet {\n  name = \"World\",\n  count: initialCount = 0,\n  showDetails = false\n} = $props();\n\nlet count = $state(initialCount);\n\nfunction increment() {\n  count += 1;\n}\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {initialCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = \"World\", count: initialCount = 0, showDetails = false } = $props();\n  let count = $state(initialCount);\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Initial Count Prop was {initialCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = \"World\", count: initialCount = 0, showDetails = false } = $props();\n  let count = $state(initialCount);\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count prop is {initialCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet { name = \"World\", count = 0, showDetails = false } = $props();\n\tlet currentCount = $state(count);\n\n\tfunction increment() {\n\t\tcurrentCount += 1;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Initial Count Prop is {count}</p>\n\t\t\t<p>ShowDetails is {showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = \"World\", count = 0, showDetails = false } = $props();\n  let internalCount = $state(count);\n\n  function increment() {\n    internalCount += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {internalCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "Google",
    "modelId": "gemini-2.5-pro-preview-03-25",
    "numSamples": 10,
    "numCorrect": 5,
    "pass1": 0.5,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  {#snippet title(bookTitle)}\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  {/snippet}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:6:3 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let books = $state([\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ]);\n</script>\n\n{#snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet books = $state([\n\t\t\"The Lord of the Rings\",\n\t\t\"To Kill a Mockingbird\",\n\t\t\"1984\"\n\t]);\n\n\t{#snippet title(bookTitle)}\n\t\t<span data-testid=\"book-title\">{bookTitle}</span>\n\t{/snippet}\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:10:2 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let books = $state([\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ]);\n</script>\n\n{#snippet title(bookTitle)}\n\t<span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  {#snippet title(bookTitle)}\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  {/snippet}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:6:3 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n{#snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n</script>\n\n{#snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  {#snippet title(bookTitle)}\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  {/snippet}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:6:3 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let books = $state([\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ]);\n</script>\n\n{#snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet books = [\n\t\t\"The Lord of the Rings\",\n\t\t\"To Kill a Mockingbird\",\n\t\t\"1984\"\n\t];\n\n\t{#snippet title(bookTitle)}\n\t\t<span data-testid=\"book-title\">{bookTitle}</span>\n\t{/snippet}\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:10:2 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "counter",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 8,
    "pass1": 0.7999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  const increment = () => {\n    count += 1;\n  };\n\n  const decrement = () => {\n    count -= 1;\n  };\n</script>\n\n<div class=\"counter\">\n  <button on:click={decrement} data-testid=\"decrement-button\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button on:click={increment} data-testid=\"increment-button\">+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-size: 1.2em;\n  }\n\n  button {\n    padding: 5px 10px;\n    font-size: 1em;\n    cursor: pointer;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  const increment = () => {\n    count++;\n  };\n\n  const decrement = () => {\n    count--;\n  };\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1em;\n  }\n\n  button {\n    padding: 0.5em 1em;\n    font-size: 1em;\n  }\n\n  span {\n    font-size: 1.5em;\n    min-width: 2em;\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function decrement() {\n    count -= 1;\n  }\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick=\"{decrement}\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick=\"{increment}\">+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-family: sans-serif;\n  }\n\n  .counter button {\n    padding: 5px 10px;\n    font-size: 1em;\n    cursor: pointer;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function decrement() {\n    count -= 1;\n  }\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n\n  .counter button {\n    padding: 5px 10px;\n    font-size: 16px;\n    cursor: pointer;\n  }\n\n  .counter span {\n    font-size: 20px;\n    min-width: 20px;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function decrement() {\n    count -= 1;\n  }\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    font-family: sans-serif;\n  }\n\n  .counter button {\n    padding: 8px 15px;\n    font-size: 1em;\n    cursor: pointer;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    background-color: #f0f0f0;\n  }\n\n  .counter button:hover {\n    background-color: #e0e0e0;\n  }\n\n  .counter span {\n    font-size: 1.2em;\n    font-weight: bold;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n\n  button {\n    padding: 5px 10px;\n    font-size: 16px;\n  }\n\n  span {\n    font-size: 20px;\n    min-width: 20px; /* Ensure space for single/double digits */\n    text-align: center;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button on:click={decrement} data-testid=\"decrement-button\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button on:click={increment} data-testid=\"increment-button\">+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-family: sans-serif;\n  }\n\n  .counter button {\n    padding: 5px 10px;\n    font-size: 1em;\n  }\n\n  .counter span {\n    font-size: 1.2em;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-size: 1.2em;\n  }\n\n  .counter button {\n    padding: 5px 10px;\n    font-size: 1em;\n    cursor: pointer;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/counter.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button on:click={decrement} data-testid=\"decrement-button\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button on:click={increment} data-testid=\"increment-button\">+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n\n  .counter button {\n    padding: 5px 10px;\n    font-size: 1em;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 10,
    "pass1": 1,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  const doubled = $derived(number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button on:click={increment} data-testid=\"increment-button\">Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 6,
    "pass1": 0.5999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const { wordCount, charCount, isLong } = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"word-count\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"counter svelte-3gtfzg\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"decrement-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m-\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<span\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m0\u001b[0m\n      \u001b[36m</span>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m+\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"counter svelte-3gtfzg\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"decrement-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m-\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<span\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m0\u001b[0m\n      \u001b[36m</span>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m+\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"counter svelte-3gtfzg\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"decrement-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m-\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<span\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m0\u001b[0m\n      \u001b[36m</span>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"svelte-3gtfzg\"\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m+\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const { wordCount, charCount, isLong } = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const calculateTextStats = (inputText) => {\n    const words = inputText.trim().split(/\\s+/).filter(word => word.length > 0);\n    const wordCount = words.length;\n    const charCount = inputText.length;\n    const isLong = wordCount > 15;\n\n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  };\n\n  const textStats = $derived.by(() => calculateTextStats(text));\n\n  const clearText = () => {\n    text = '';\n  };\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={text}\n    placeholder=\"Enter text here...\"\n  />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {textStats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {textStats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {textStats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"word-count\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"counter svelte-cg057z\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"decrement-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m-\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<span\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m0\u001b[0m\n      \u001b[36m</span>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m+\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"counter svelte-cg057z\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"decrement-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m-\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<span\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m0\u001b[0m\n      \u001b[36m</span>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m+\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"text-input\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"counter svelte-cg057z\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"decrement-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m-\u001b[0m\n      \u001b[36m</button>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<span\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"count-value\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m0\u001b[0m\n      \u001b[36m</span>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"increment-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0m+\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const { wordCount, charCount, isLong } = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(Boolean);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  }, text); // Pass text as a dependency explicitly\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived(wordCount)}</p>\n    <p data-testid=\"char-count\">Characters: {$derived(charCount)}</p>\n    <p data-testid=\"length-indicator\">Status: {$derived(isLong ? 'Long text' : 'Short text')}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:6:43 `$derived.by` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const stats = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n\n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const { wordCount, charCount, isLong } = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n    return {\n      wordCount: words.length,\n      charCount: text.length,\n      isLong: words.length > 15\n    };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const stats = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n\n    return {\n      wordCount,\n      charCount,\n      isLong,\n    };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n\n  <div>\n    <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const { wordCount, charCount, isLong } = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(Boolean);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n\n    return { wordCount, charCount, isLong };\n  });\n\n  const clearText = () => {\n    text = '';\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/derived-by.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/derived-by.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const { wordCount, charCount, isLong } = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(Boolean);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n\n    return { wordCount, charCount, isLong };\n  });\n\n  const clearText = () => {\n    text = '';\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const derivedData = $derived.by(() => {\n    // Calculate word count\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n    const wordCount = words.length;\n\n    // Calculate character count\n    const charCount = text.length;\n\n    // Determine if text is long\n    const isLong = wordCount > 15;\n\n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n\n  const clearText = () => {\n    text = '';\n  };\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={text}\n    placeholder=\"Enter text here\"\n  />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n\n  <div>\n    <p data-testid=\"word-count\">Words: {derivedData.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {derivedData.charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {derivedData.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "each",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 6,
    "pass1": 0.5999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state(['Jerry', 'Elaine', 'Kramer']);\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /tmp/google/Component.svelte (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/Component.svelte) in /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts. Does the file exist?"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte';\n\n  let characters = $state(['Jerry', 'Elaine', 'Kramer']);\n\n  function addGeorge() {\n    characters.push('George');\n    // Svelte 5 $state reactivity handles this push directly\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte';\n\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state(['Jerry', 'Elaine', 'Kramer']);\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  const addGeorge = () => {\n    characters.push(\"George\");\n  };\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/each.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state(['Jerry', 'Elaine', 'Kramer']);\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state(['Jerry', 'Elaine', 'Kramer']);\n\n  function addGeorge() {\n    characters.push('George');\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\tlet characters = $state(['Jerry', 'Elaine', 'Kramer']);\n\n\tfunction addGeorge() {\n\t\tcharacters.push('George');\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 7,
    "pass1": 0.7,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  const increment = () => {\n    number++;\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled;\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button on:click={increment} data-testid=\"increment-button\">Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled;\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  const increment = () => {\n    number++;\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  const increment = () => {\n    number++;\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled;\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button on:click={increment} data-testid=\"increment-button\">Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled:\u001b[39m"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 7,
    "pass1": 0.7,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/hello-world.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/hello-world.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script needed for this simple component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n    font-family: sans-serif; /* Optional: make it look a bit nicer */\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 10px;\n\t}\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script needed for this simple component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px; /* Small margin */\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/hello-world.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/hello-world.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // This is a simple static component, no script is needed.\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n    font-family: sans-serif; /* Optional: make it look a bit nicer */\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script needed for this component\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/hello-world.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/hello-world.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // Basic inspect: logs the value whenever it changes\n  $inspect(text);\n\n  // Inspect with a custom callback/message\n  $inspect(text).with((value) => {\n    console.log('Text updated via .with:', value);\n  });\n\n  // Trace inside an effect that depends on text\n  $effect(() => {\n    console.log('Effect triggered by text change');\n    $inspect.trace(); // Show the trace of what caused this effect to run\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:17:4 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // Basic inspect: logs the value whenever it changes\n  $inspect(text);\n\n  // Inspect with a custom callback\n  $inspect(text).with((value, prev_value) => {\n    console.log('Text updated via inspect.with:', value, 'Previous:', prev_value);\n  });\n\n  // Trace inside an effect that reacts to text changes\n  $effect(() => {\n    console.log('Text changed, effect running');\n    $inspect.trace(); // Logs the call stack when the effect runs\n  });\n</script>\n\n<div>\n  <label for=\"text-input\">Enter text:</label>\n  <input data-testid=\"text-input\" id=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n\n  <p data-testid=\"text-value\">Current text: {$inspect(text)}</p>\n  <p data-testid=\"char-count\">Character count: {$inspect(text.length)}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:17:4 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic inspect\n  $inspect(text);\n\n  // Inspect with custom callback\n  $inspect(text).with((value, old_value) => {\n    console.log(Text updated from \"${old_value}\" to \"${value}\");\n  });\n\n  // Inspect trace inside an effect\n  $effect(() => {\n    $inspect.trace('Text changed effect');\n    // This effect runs whenever text changes\n    console.log(Effect triggered. New text: ${text});\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/inspect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/inspect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // Basic inspect: logs initial value\n  $inspect(text);\n\n  // Inspect with callback: logs updates\n  $inspect(text).with(value => {\n    console.log('$inspect.with: Text updated to', value);\n  });\n\n  // Effect depending on text, using inspect.trace\n  $effect(() => {\n    $inspect.trace(); // Logs trace information when this effect runs\n    console.log('$effect: Text dependency triggered.');\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Hello world\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Hello world\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Testing $inspect\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Testing $inspect\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"!@#$%^&*()\"\u001b[39m\nReceived:\n\u001b[31m  Current text: !@#$%^&*()\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"\"\u001b[39m\nReceived:\n\u001b[31m  Current text:\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // Basic $inspect to log the text value\n  $inspect(text);\n\n  // $inspect with a callback to log updates\n  $inspect(text).with((value) => {\n    console.log('$inspect.with callback: Text value changed to', value);\n  });\n\n  // $effect that runs when text changes, using $inspect.trace()\n  $effect(() => {\n    console.log('$effect: Input text state changed.');\n    // Use $inspect.trace() inside an effect to see what caused it to run\n    $inspect.trace();\n  });\n</script>\n\n<div>\n  <label for=\"text-input\">Enter text:</label>\n  <input id=\"text-input\" data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>\n\n<style>\n  div {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n  }\n  label {\n    font-weight: bold;\n  }\n  input[type=\"text\"] {\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    font-size: 1rem;\n  }\n  p {\n    margin: 0;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:18:4 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // 2. Basic $inspect to log the input value\n  $inspect(text);\n\n  // 3. $inspect(...).with to track updates with a custom callback\n  $inspect(text).with((newValue) => {\n    console.log('$inspect.with: Text updated to', newValue);\n  });\n\n  // 4. $inspect.trace() inside an effect that runs when the input changes\n  $effect(() => {\n    console.log('$effect: Text changed to', text);\n    $inspect.trace(); // Trace inside the effect\n  });\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:17:4 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // Basic inspect\n  $inspect(text);\n\n  // Inspect with custom callback on update\n  $inspect(text).with((newValue) => {\n    console.log('Text updated to:', newValue);\n  });\n\n  // Effect with trace\n  $effect(() => {\n    console.log('Text effect triggered');\n    $inspect.trace(); // Trace dependencies and updates leading here\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:17:4 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic inspect: logs the value whenever it changes\n  $inspect(text);\n\n  // Inspect with a custom callback\n  $inspect(text).with(value => {\n    console.log('Input value changed (from .with):', value);\n  });\n\n  // Effect to demonstrate inspect.trace()\n  $effect(() => {\n    console.log('Text effect triggered');\n    // Trace the reactive dependencies leading to this effect\n    $inspect.trace();\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:18:4 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic inspect logs the value whenever it changes\n  $inspect(text);\n\n  // Inspect with a custom callback\n  $inspect(text).with(value => {\n    console.log('[$inspect.with] Text value changed to:', value);\n  });\n\n  // Trace inside an effect that depends on text\n  $effect(() => {\n    console.log('[$effect] Text changed, tracing...');\n    $inspect.trace(); // Logs the call stack\n  });\n\n</script>\n\n<div>\n  <label for=\"text-input\">Edit Text:</label>\n  <input id=\"text-input\" data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n\n  <p data-testid=\"text-value\">Current text: {$inspect(text, text)}</p> {/* Using inspect here just for demo, not required */}\n  <p data-testid=\"char-count\">Character count: {$inspect(text.length, text.length)}</p> {/* Using inspect here just for demo, not required */}\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:26:124 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n\n  // Basic $inspect to log the value whenever it changes\n  $inspect(text);\n\n  // $inspect.with to track updates with a custom callback\n  $inspect(text).with((value, previousValue) => {\n    console.log('$inspect.with: text updated from', previousValue, 'to', value);\n  });\n\n  // $effect to demonstrate $inspect.trace()\n  $effect(() => {\n    // This effect runs whenever text changes\n    console.log('$effect: text changed:', text);\n    // Use $inspect.trace() to log the call stack when this effect runs\n    $inspect.trace();\n  });\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {$inspect(text)}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/inspect.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/inspect.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "props",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 6,
    "pass1": 0.5999999999999999,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props();\n\n  let currentCount = $state(count);\n\n  function increment() {\n    currentCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let { name = \"World\", count = 0, showDetails = false } = $props();\n\n  let stateCount = $state(count);\n\n  function increment() {\n    stateCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {stateCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props();\n\n  let internalCount = $state(count);\n\n  const increment = () => {\n    internalCount++;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {internalCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Initial Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name, count, showDetails } = $props<{\n    name?: string;\n    count?: number;\n    showDetails?: boolean;\n  }>({\n    name: \"World\",\n    count: 0,\n    showDetails: false,\n  });\n\n  let currentCount = $state(count);\n\n  function increment() {\n    currentCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:5:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count: initialCount = 0, showDetails = false } = $props();\n\n  let count = $state(initialCount);\n\n  function incrementCount() {\n    count++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" onclick={incrementCount}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {initialCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"name-display\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"name-display\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"details\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div />\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = 'World', count = 0, showDetails = false } = $props();\n\n  let internalCount = $state(count);\n\n  function increment() {\n    internalCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {internalCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props();\n\n  let currentCount = $state(count);\n\n  function increment() {\n    currentCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props();\n\n  let localCount = $state(count);\n\n  const increment = () => {\n    localCount++;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {localCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {localCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"name-display\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"name-display\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"increment-button\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"details\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div />\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const {\n    name = 'World',\n    count = 0,\n    showDetails = false\n  } = $props();\n\n  let internalCount = $state(count);\n\n  const increment = () => {\n    internalCount++;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {internalCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {internalCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let {$props: { name = 'World', count = 0, showDetails = false }} = $props();\n\n  let currentCount = $state(count);\n\n  function increment() {\n    currentCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:4:7 `$props()` assignment must not contain nested properties or computed keys\nhttps://svelte.dev/e/props_invalid_pattern"
        ],
        "temperature": 0.8
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-04-17",
    "numSamples": 10,
    "numCorrect": 1,
    "pass1": 0.09999999999999998,
    "pass10": 1,
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  let snippet title(book) {\n    <span>{book}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:10:14 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.2
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  let title = snippet (bookTitle) {\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"book-item\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"book-title\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"book-item\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mJerry\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mElaine\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[36m<li\u001b[39m\n          \u001b[33mdata-testid\u001b[39m=\u001b[32m\"character\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[0mKramer\u001b[0m\n        \u001b[36m</li>\u001b[39m\n        \u001b[0m\u001b[0m\n      \u001b[36m</ul>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0.8
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n</script>\n\n{#snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": true,
        "errors": [],
        "temperature": 0.8
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  {@snippet title(book)}\n    <span data-testid=\"book-title\">{book}</span>\n  {/snippet}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "Failed to load url /Users/k/Documents/GitHub/svelte-bench/tmp/google/snippets.test.ts (resolved id: /Users/k/Documents/GitHub/svelte-bench/tmp/google/snippets.test.ts). Does the file exist?"
        ],
        "temperature": 0.8
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  // Define the snippet\n  {@snippet title(bookTitle)}\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  {/snippet}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:11:3 Unexpected character '@'\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  let snippet title(bookTitle) {\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:10:14 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst bookTitles = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n\tlet { snippet } = $$;\n\n\tsnippet title(bookTitle) {\n\t\t<span>{bookTitle}</span>\n\t}\n</script>\n\n<ul>\n\t{#each bookTitles as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>\n\n<style>\n\t/* Basic styling example - not required by prompt but good practice */\n\tspan {\n\t\tfont-weight: bold;\n\t}\n</style>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:8:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  {@snippet title(book)}\n    <span data-testid=\"book-title\">{book}</span>\n  {/snippet}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:10:3 Unexpected character '@'\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  let { snippet: title } = $snippets();\n</script>\n\n{#snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:6:27 `$snippets` is an illegal variable name. To reference a global variable called `$snippets`, use `globalThis.$snippets`\nhttps://svelte.dev/e/global_reference_invalid"
        ],
        "temperature": 0.8
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  // Define the snippet\n  const title = ($bookTitle) => {\n    return (\n      <span data-testid=\"book-title\">{$bookTitle}</span>\n    );\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "tmp/google/Component.svelte:9:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0.8
      }
    ]
  }
]