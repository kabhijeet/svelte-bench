[
  {
    "testName": "counter",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 1,
    "pass1": 1,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet count = $state(0);\n</script>\n\n<div class=\"counter\">\n<button data-testid=\"decrement-button\" onclick={() => count -= 1}>-</button>\n<span data-testid=\"count-value\">{count}</span>\n<button data-testid=\"increment-button\" onclick={() => count += 1}>+</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 1,
    "pass1": 1,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet number = $state(5);\nlet doubled = $derived(number * 2);\n\nfunction increment() {\n  number += 1;\n}\n</script>\n\n<div>\n<p data-testid=\"number-value\">Number: {number}</p>\n<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet text = $state('');\nconst wordCount = $derived.by(() => {\n  const words = text.split(' ').filter(Boolean).length;\n  return { value: words, update() {} };\n});\n</script>\n\n<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n<button data-testid=\"clear-button\">Clear</button>\n<div>\n  <p data-testid=\"word-count\">{wordCount.value}</p>\n  <p data-testid=\"char-count\">{text.length}</p>\n  <p data-testid=\"length-indicator\">\n    {wordCount.value > 15 ? 'Long text' : 'Short text'}\n  </p>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Words: 0\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Words: 2\u001b[39m\nReceived:\n\u001b[31m  2\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Words: 2\u001b[39m\nReceived:\n\u001b[31m  2\u001b[39m"
        ],
        "temperature": 0
      }
    ]
  },
  {
    "testName": "each",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet characters = ['Jerry', 'Elaine', 'Kramer'];\nfunction addGeorge() {\n  characters.push('George');\n}\n</script>\n\n<div data-testid=\"characters-list\">\n{#each characters as character}\n<li>{character}</li>\n{/each}\n<button onclick={addGeorge} data-testid=\"add-george-button\">Add George</button>\n</div>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<li>\u001b[39m\n        \u001b[0mJerry\u001b[0m\n      \u001b[36m</li>\u001b[39m\n      \u001b[36m<li>\u001b[39m\n        \u001b[0mElaine\u001b[0m\n      \u001b[36m</li>\u001b[39m\n      \u001b[36m<li>\u001b[39m\n        \u001b[0mKramer\u001b[0m\n      \u001b[36m</li>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"character\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mdata-testid\u001b[39m=\u001b[32m\"characters-list\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<li>\u001b[39m\n        \u001b[0mJerry\u001b[0m\n      \u001b[36m</li>\u001b[39m\n      \u001b[36m<li>\u001b[39m\n        \u001b[0mElaine\u001b[0m\n      \u001b[36m</li>\u001b[39m\n      \u001b[36m<li>\u001b[39m\n        \u001b[0mKramer\u001b[0m\n      \u001b[36m</li>\u001b[39m\n      \u001b[0m \u001b[0m\n      \u001b[36m<button\u001b[39m\n        \u001b[33mdata-testid\u001b[39m=\u001b[32m\"add-george-button\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[0mAdd George\u001b[0m\n      \u001b[36m</button>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ],
        "temperature": 0
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet number = $state(5);\nlet doubled = $effect(() => {\n  return number * 2;\n});\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/lmstudio/Component.svelte:5:14 `$effect()` can only be used as an expression statement\nhttps://svelte.dev/e/effect_invalid_placement"
        ],
        "temperature": 0
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet { greeting } = $props();\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">{greeting}</div>\n<style>\n</style>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Hello, World!\u001b[39m\nReceived:\n\u001b[31m\u001b[39m"
        ],
        "temperature": 0
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nimport { inspect } from 'svelte';\nlet text = $state('Hello world');\n$inspect(text).with((value) => {\n  console.log(`Updated value: ${value}`);\n});\n$effect(() => {\n  const count = text.length;\n  $inspect.trace(() => {\n    console.log(`Character count changed to ${count}`);\n  });\n});\n</script>\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "$inspect(...) is not a function\n\n\tin <unknown>\n",
          "$inspect(...) is not a function\n\n\tin <unknown>\n",
          "$inspect(...) is not a function\n\n\tin <unknown>\n",
          "$inspect(...) is not a function\n\n\tin <unknown>\n"
        ],
        "temperature": 0
      }
    ]
  },
  {
    "testName": "props",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 1,
    "pass1": 1,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet { name = 'World', count = 0, showDetails = false } = $props();\n</script>\n\n<div>\n<h1 data-testid=\"name-display\">{name}</h1>\n<p data-testid=\"count-display\">Count: {count}</p>\n<button data-testid=\"increment-button\" onclick={() => count++}>Increment</button>\n\n{#if showDetails}\n  <div data-testid=\"details\">\n    <p>Name is {name}</p>\n    <p>Count is {count}</p>\n    <p>ShowDetails is {showDetails.toString()}</p>\n  </div>\n{/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "LMStudio",
    "modelId": "joekraper/SvelteMind",
    "numSamples": 1,
    "numCorrect": 1,
    "pass1": 1,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet books = ['The Lord of the Rings', 'To Kill a Mockingbird', '1984'];\n</script>\n\n<ul data-testid=\"book-list\">\n{#each books as book}\n<li data-testid=\"book-item\">\n{@render title(book)}\n</li>\n{/each}\n</ul>\n\n{#snippet title(title)}\n<span data-testid=\"book-title\">{title}</span>\n{/snippet}",
        "success": true,
        "errors": [],
        "temperature": 0
      }
    ]
  }
]