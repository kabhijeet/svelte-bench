[
  {
    "testName": "counter",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
    "testResult": {
      "testName": "counter",
      "success": true,
      "testFiles": 1,
      "totalTests": 4,
      "failedTests": 0,
      "errors": []
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/counter/prompt.md",
    "timestamp": "2025-04-30T21:11:29.787Z"
  },
  {
    "testName": "derived",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => $number++}>Increment</button>\n</div>\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n</script>",
    "testResult": {
      "testName": "derived",
      "success": false,
      "testFiles": 1,
      "totalTests": 2,
      "failedTests": 2,
      "errors": [
        "store_invalid_shape\n`number` is not a store with a `subscribe` method\nhttps://svelte.dev/e/store_invalid_shape\n\n\tin {expression}\n\tin Component.svelte\n",
        "store_invalid_shape\n`number` is not a store with a `subscribe` method\nhttps://svelte.dev/e/store_invalid_shape\n\n\tin {expression}\n\tin Component.svelte\n"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/derived/prompt.md",
    "timestamp": "2025-04-30T21:11:31.186Z"
  },
  {
    "testName": "derived-by",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <button data-testid=\"clear-button\" on:click={() => {$text = ''}}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$longText}</p>\n  </div>\n</div>\n\n<script>\n  let $text = $state('');\n\n  let { $wordCount, $charCount, $longText } = $derived.by(() => {\n    const words = $text.trim() === '' ? 0 : $text.trim().split(/\\s+/).length;\n    const chars = $text.length;\n    const isLong = words > 15 ? \"Long text\" : \"Short text\";\n\n    return {\n      $wordCount: words,\n      $charCount: chars,\n      $longText: isLong,\n    };\n  });\n</script>",
    "testResult": {
      "testName": "derived-by",
      "success": false,
      "testFiles": 1,
      "totalTests": 0,
      "failedTests": 0,
      "errors": [
        "tmp/Component.svelte:14:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/derived-by/prompt.md",
    "timestamp": "2025-04-30T21:11:33.371Z"
  },
  {
    "testName": "each",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    characters.push(\"George\");\n    characters = characters\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
    "testResult": {
      "testName": "each",
      "success": false,
      "testFiles": 1,
      "totalTests": 0,
      "failedTests": 0,
      "errors": [
        "tmp/Component.svelte:10:4 Cannot assign to constant\nhttps://svelte.dev/e/constant_assignment"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/each/prompt.md",
    "timestamp": "2025-04-30T21:11:34.914Z"
  },
  {
    "testName": "effect",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  import { invalidate } from 'svelte/internal';\n  let number = $state(5);\n  let doubled;\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number++;\n    invalidate(() => number);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
    "testResult": {
      "testName": "effect",
      "success": false,
      "testFiles": 1,
      "totalTests": 0,
      "failedTests": 0,
      "errors": [
        "tmp/Component.svelte:4:2 Imports of `svelte/internal/*` are forbidden. It contains private runtime code which is subject to change without notice. If you're importing from `svelte/internal/*` to work around a limitation of Svelte, please open an issue at https://github.com/sveltejs/svelte and explain your use case\nhttps://svelte.dev/e/import_svelte_internal_forbidden"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/effect/prompt.md",
    "timestamp": "2025-04-30T21:11:36.408Z"
  },
  {
    "testName": "hello-world",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
    "testResult": {
      "testName": "hello-world",
      "success": true,
      "testFiles": 1,
      "totalTests": 2,
      "failedTests": 0,
      "errors": []
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/hello-world/prompt.md",
    "timestamp": "2025-04-30T21:11:37.663Z"
  },
  {
    "testName": "inspect",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  $inspect(text);\n\n  $inspect(text).with((value) => {\n    console.log('Text updated (with):', value);\n  });\n\n  $effect(() => {\n    $inspect.trace(text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
    "testResult": {
      "testName": "inspect",
      "success": false,
      "testFiles": 1,
      "totalTests": 4,
      "failedTests": 4,
      "errors": [
        "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Hello world\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Hello world\u001b[39m",
        "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"Testing $inspect\"\u001b[39m\nReceived:\n\u001b[31m  Current text: Testing $inspect\u001b[39m",
        "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"!@#$%^&*()\"\u001b[39m\nReceived:\n\u001b[31m  Current text: !@#$%^&*()\u001b[39m",
        "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Current text: \"\"\u001b[39m\nReceived:\n\u001b[31m  Current text:\u001b[39m"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/inspect/prompt.md",
    "timestamp": "2025-04-30T21:11:39.750Z"
  },
  {
    "testName": "props",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props();\n\n  let currentCount = $state(count);\n\n  function increment() {\n    currentCount++;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is true</p>\n    </div>\n  {/if}\n</div>",
    "testResult": {
      "testName": "props",
      "success": true,
      "testFiles": 1,
      "totalTests": 4,
      "failedTests": 0,
      "errors": []
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/props/prompt.md",
    "timestamp": "2025-04-30T21:11:41.567Z"
  },
  {
    "testName": "snippets",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.0-flash",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  const books = $state([\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"]);\n\n  {@snippet title(book)}\n    <span data-testid=\"book-title\">{book}</span>\n  {/snippet}\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title(book)}</li>\n  {/each}\n</ul>",
    "testResult": {
      "testName": "snippets",
      "success": false,
      "testFiles": 1,
      "totalTests": 0,
      "failedTests": 0,
      "errors": [
        "tmp/Component.svelte:6:3 Unexpected character '@'\nhttps://svelte.dev/e/js_parse_error"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/snippets/prompt.md",
    "timestamp": "2025-04-30T21:11:42.935Z"
  },
  {
    "testName": "counter",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  const increment = () => {\n    count++;\n  };\n\n  const decrement = () => {\n    count--;\n  };\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick=\"{decrement}\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick=\"{increment}\">+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-family: sans-serif;\n  }\n\n  .counter button {\n    padding: 5px 10px;\n    font-size: 1em;\n    cursor: pointer;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n  }\n\n  .counter span {\n    font-size: 1.2em;\n    min-width: 30px; /* Give some space for the number */\n    text-align: center;\n  }\n</style>",
    "testResult": {
      "testName": "counter",
      "success": true,
      "testFiles": 1,
      "totalTests": 4,
      "failedTests": 0,
      "errors": []
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/counter/prompt.md",
    "timestamp": "2025-04-30T21:11:46.509Z"
  },
  {
    "testName": "derived",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number * 2);\n\n  function increment() {\n    number = number + 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
    "testResult": {
      "testName": "derived",
      "success": true,
      "testFiles": 1,
      "totalTests": 2,
      "failedTests": 0,
      "errors": []
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/derived/prompt.md",
    "timestamp": "2025-04-30T21:11:49.258Z"
  },
  {
    "testName": "derived-by",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const { wordCount, charCount, isLong } = $derived.by(() => {\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const isLong = wordCount > 15;\n    return { wordCount, charCount, isLong };\n  });\n\n  const clearText = () => {\n    text = '';\n  };\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={text}\n    placeholder=\"Enter text here...\"\n  />\n  <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>\n\n<style>\n  div {\n    margin-bottom: 10px;\n  }\n  input {\n    margin-right: 10px;\n    padding: 5px;\n  }\n  button {\n    padding: 5px 10px;\n  }\n  p {\n    margin: 5px 0;\n  }\n</style>",
    "testResult": {
      "testName": "derived-by",
      "success": true,
      "testFiles": 1,
      "totalTests": 3,
      "failedTests": 0,
      "errors": []
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/derived-by/prompt.md",
    "timestamp": "2025-04-30T21:11:52.996Z"
  },
  {
    "testName": "each",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte/internal';\n\n  let characters = $state(['Jerry', 'Elaine', 'Kramer']);\n\n  function addGeorge() {\n    characters.push('George');\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
    "testResult": {
      "testName": "each",
      "success": false,
      "testFiles": 1,
      "totalTests": 0,
      "failedTests": 0,
      "errors": [
        "tmp/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/each/prompt.md",
    "timestamp": "2025-04-30T21:11:55.767Z"
  },
  {
    "testName": "effect",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from 'svelte';\n\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button on:click={increment} data-testid=\"increment-button\">Increment</button>\n</div>",
    "testResult": {
      "testName": "effect",
      "success": false,
      "testFiles": 1,
      "totalTests": 0,
      "failedTests": 0,
      "errors": [
        "tmp/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/effect/prompt.md",
    "timestamp": "2025-04-30T21:11:59.336Z"
  },
  {
    "testName": "hello-world",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
    "testResult": {
      "testName": "hello-world",
      "success": true,
      "testFiles": 1,
      "totalTests": 2,
      "failedTests": 0,
      "errors": []
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/hello-world/prompt.md",
    "timestamp": "2025-04-30T21:12:01.467Z"
  },
  {
    "testName": "inspect",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // Basic inspect\n  $inspect(text);\n\n  // Inspect with a custom callback\n  $inspect(text).with((newValue, oldValue) => {\n    console.log(`Text updated from \"${oldValue}\" to \"${newValue}\"`);\n  });\n\n  // Trace inside an effect\n  $effect(() => {\n    // This effect runs when text changes\n    console.log('Effect triggered by text change');\n    $inspect.trace(); // Trace the dependency chain\n  });\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {$inspect(text, 'Displayed text')}</p>\n  <p data-testid=\"char-count\">Character count: {$inspect(text.length, 'Character count')}</p>\n</div>",
    "testResult": {
      "testName": "inspect",
      "success": false,
      "testFiles": 1,
      "totalTests": 0,
      "failedTests": 0,
      "errors": [
        "tmp/Component.svelte:18:4 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/inspect/prompt.md",
    "timestamp": "2025-04-30T21:12:04.810Z"
  },
  {
    "testName": "props",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count = 0, showDetails = false } = $props();\n\n  let localCount = $state(count);\n\n  function increment() {\n    localCount += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {localCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
    "testResult": {
      "testName": "props",
      "success": true,
      "testFiles": 1,
      "totalTests": 4,
      "failedTests": 0,
      "errors": []
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/props/prompt.md",
    "timestamp": "2025-04-30T21:12:08.997Z"
  },
  {
    "testName": "snippets",
    "llmProvider": "Google",
    "modelIdentifier": "gemini-2.5-flash-preview-04-17",
    "generatedCode": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\",\n  ];\n\n  const snippet title(bookTitle) {\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
    "testResult": {
      "testName": "snippets",
      "success": false,
      "testFiles": 1,
      "totalTests": 0,
      "failedTests": 0,
      "errors": [
        "tmp/Component.svelte:10:16 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
      ]
    },
    "promptPath": "/Users/k/Documents/GitHub/svelte-bench/src/tests/snippets/prompt.md",
    "timestamp": "2025-04-30T21:12:11.461Z"
  }
]